<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SkierHou</title>
  
  <subtitle>123</subtitle>
  <link href="https://skierhou.github.io/atom.xml" rel="self"/>
  
  <link href="https://skierhou.github.io/"/>
  <updated>2021-03-02T05:48:37.352Z</updated>
  <id>https://skierhou.github.io/</id>
  
  <author>
    <name>Skier</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown基础语法</title>
    <link href="https://skierhou.github.io/2021/03/02/Base/markdown/"/>
    <id>https://skierhou.github.io/2021/03/02/Base/markdown/</id>
    <published>2021-03-02T06:30:01.000Z</published>
    <updated>2021-03-02T05:48:37.352Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>初于方便写文章考虑，整理一下markdown语法规则 <a href="https://www.jianshu.com/p/191d1e21f7ed">转载链接</a></p></blockquote><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*&#96;</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用</span><br><span class="line">&gt;&gt; 引用</span><br><span class="line">&gt;&gt;&gt; 引用</span><br></pre></td></tr></table></figure><blockquote><p>引用</p><blockquote><p>引用</p><blockquote><p>引用</p></blockquote></blockquote></blockquote><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><hr><hr><hr><hr><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</span><br><span class="line">参考：![default](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;butterfly-extsrc@1&#x2F;img&#x2F;default.jpg &quot;标题&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg" alt="default" title="标题"></p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">参考：[简书](http:&#x2F;&#x2F;jianshu.com)</span><br></pre></td></tr></table></figure><p><a href="http://jianshu.com/">简书</a></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">无序： * - +</span><br><span class="line">有序： 1. 2. 3.</span><br></pre></td></tr></table></figure><ul><li>无序</li><li>无序</li><li>无序</li></ul><ol><li>有序</li><li>有序</li><li>有序</li></ol><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th align="center">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr></tbody></table><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(&#96;&#96;&#96;)</span><br><span class="line">    代码块...</span><br><span class="line">(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;sequence</span><br><span class="line">Title:时序图示例</span><br><span class="line">客户端-&gt;服务端: 我想找你拿下数据 SYN</span><br><span class="line">服务端--&gt;客户端: 我收到你的请求啦 ACK+SYN</span><br><span class="line">客户端-&gt;&gt;服务端: 我收到你的确认啦，我们开始通信吧 ACK</span><br><span class="line">Note right of 服务端: 我是一个服务端</span><br><span class="line">Note left of 客户端: 我是一个客户端</span><br><span class="line">Note over 服务端,客户端: TCP 三次握手</span><br><span class="line">participant 观察者</span><br><span class="line"></span><br><span class="line">这里也不支持流程图</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;初于方便写文章考虑，整理一下markdown语法规则 &lt;a href=&quot;https://www.jianshu.com/p/191d1e21f7ed&quot;&gt;转载链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="通用" scheme="https://skierhou.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    
    <category term="Markdown" scheme="https://skierhou.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>2021年规划</title>
    <link href="https://skierhou.github.io/2021/03/01/Plan/plan2021/"/>
    <id>https://skierhou.github.io/2021/03/01/Plan/plan2021/</id>
    <published>2021-03-01T06:30:01.000Z</published>
    <updated>2021-03-02T04:51:29.955Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每年需持续整理个人任务，个人任务可以规划为年度任务，月任务，详细再到周任务<br>记录个人任务完成情况，如未完成，需写下原因以检讨<br>在工作空闲时间，假期，周末等时期完成的任务</p></blockquote><h1 id="年度任务规划"><a href="#年度任务规划" class="headerlink" title="年度任务规划"></a>年度任务规划</h1><table><thead><tr><th align="left">任务描述</th><th align="center">完成情况(%)</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left"><strong>客户端方向</strong></td><td align="center"></td><td align="left"></td></tr><tr><td align="left">Dots技术栈深度学习，需要能做到运用到项目中去，使用Dots制作鱼群，鸟群等效果Demo</td><td align="center">10%</td><td align="left">目前已掌握基础使用</td></tr><tr><td align="left">EGameTang框架深度学习，掌握EGameTang网络架构原理并制作联机RPGDemo</td><td align="center">10%</td><td align="left">目前已掌握基础使用</td></tr><tr><td align="left">GameFramework框架深度学习，学习其代码规范，底层原理，架构思想</td><td align="center">50%</td><td align="left">目前以运用于项目中</td></tr><tr><td align="left">Ability技能系统搭建完成，并完成多个模式的Demo</td><td align="center">50%</td><td align="left">技能系统已搭建，准备Demo即可</td></tr><tr><td align="left">AI行为系统的深度学习，主要参考UE4 AI系统</td><td align="center">10%</td><td align="left">掌握基本使用</td></tr><tr><td align="left">AssetBundle,Addressable的深度学习</td><td align="center">40%</td><td align="left"></td></tr><tr><td align="left"><strong>TA方向</strong></td><td align="center"></td><td align="left"></td></tr><tr><td align="left">OpenGL，看完书籍红皮书，蓝皮书</td><td align="center">10%</td><td align="left"></td></tr><tr><td align="left">UnityShader，光照GI，渲染管线</td><td align="center">20%</td><td align="left"></td></tr><tr><td align="left">Unity实现天气系统</td><td align="center">0%</td><td align="left"></td></tr><tr><td align="left">PS，基本使用</td><td align="center">0%</td><td align="left"></td></tr><tr><td align="left">3DMax，基本使用</td><td align="center">0%</td><td align="left"></td></tr><tr><td align="left">粒子特效制作</td><td align="center">0%</td><td align="left"></td></tr><tr><td align="left"><strong>整体技术方向</strong></td><td align="center"></td><td align="left"></td></tr><tr><td align="left">完成一款游戏Demo,未来考虑长期制作并发布的Demo</td><td align="center">0%</td><td align="left"></td></tr></tbody></table><h1 id="月任务规划"><a href="#月任务规划" class="headerlink" title="月任务规划"></a>月任务规划</h1><table><thead><tr><th align="center">时间(月)</th><th align="center">任务描述</th><th align="center">完成情况(%)</th><th align="center">注释</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">无</td><td align="center">无</td><td align="center">3月启动</td></tr><tr><td align="center">2</td><td align="center">无</td><td align="center">无</td><td align="center">3月启动</td></tr><tr><td align="center">3</td><td align="center">1.GF框架深度学习，代码解剖；2.PS,3DMax,粒子特效制作；</td><td align="center">0%</td><td align="center"></td></tr><tr><td align="center">4</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">5</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">6</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">7</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">8</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">9</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">10</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">11</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">12</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr></tbody></table><h1 id="关于生活的规划"><a href="#关于生活的规划" class="headerlink" title="关于生活的规划"></a>关于生活的规划</h1><table><thead><tr><th align="left">任务描述</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left"><strong>年度目标</strong></td><td align="left"></td></tr><tr><td align="left">改善肠胃，健身，增肥20斤</td><td align="left"></td></tr><tr><td align="left">存钱***元</td><td align="left"></td></tr><tr><td align="left"><strong>月目标</strong></td><td align="left"></td></tr><tr><td align="left">每月消费&lt;4500 (包括房租)</td><td align="left"></td></tr><tr><td align="left">每月增重&gt;2斤</td><td align="left"></td></tr><tr><td align="left"><strong>日目标</strong></td><td align="left"></td></tr><tr><td align="left">每日消费&lt;60</td><td align="left"></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">每年需整理的任务规划</summary>
    
    
    
    <category term="年度规划" scheme="https://skierhou.github.io/categories/%E5%B9%B4%E5%BA%A6%E8%A7%84%E5%88%92/"/>
    
    
    <category term="Plan" scheme="https://skierhou.github.io/tags/Plan/"/>
    
  </entry>
  
  <entry>
    <title>GameFramework 底层解析</title>
    <link href="https://skierhou.github.io/2021/03/01/Unity/GameFramework/GF1/"/>
    <id>https://skierhou.github.io/2021/03/01/Unity/GameFramework/GF1/</id>
    <published>2021-03-01T06:30:01.000Z</published>
    <updated>2021-03-02T12:11:23.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GF的dll层源码解析，学习设计思路，学习代码规范 [GF官网]](<a href="https://gameframework.cn/">https://gameframework.cn/</a>)<br>看了GF的源码，感觉自己之前写的代码都是一堆垃圾!!!<br>源码阅读建议：与<a href="https://github.com/EllanJiang/StarForce">StarForce</a>项目一同阅读</p></blockquote><h2 id="Base层"><a href="#Base层" class="headerlink" title="Base层"></a>Base层</h2><p>数据处理器，序列化工具，Log，事件池，引用池，任务代理池，其他扩展：Action，Func，变量封装(用于自定义数据结构)，自定义链表</p><h3 id="DataProvider-数据处理器"><a href="#DataProvider-数据处理器" class="headerlink" title="DataProvider 数据处理器"></a>DataProvider 数据处理器</h3><p>主要细节只需要看IDataProvider，IDataProviderHelper的实现上<br>IDataProvider，IDataProviderHelper主要实现2个接口：ReadData，ParseData</p><ol><li>IDataProvider 从ResourceManager中读取资源，为数据提供者</li><li>IDataProviderHelper负责对具体数据的解析，为数据提供者帮助接口，<strong>用户使用上只需要实现帮助类即可</strong><br>对于IDataProviderHelper可能会引起误区，这里的ReadData是在IDataProvider读取资源成功时调用，这时已经拿到了需要的资源，可以直接使用或者再主动调用ParseData解析数据再使用。</li><li>执行顺序如：<br>ConfigManager.ReadData()-&gt;IDataProvider.ReadData()-&gt;读取成功后-&gt;IDataProviderHelper.ReadData()，<br>这时主动调用ConfigManager.ParseData()-&gt;IDataProvider.ParseData()-&gt;IDataProviderHelper.ParseData()</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">IDataProvider</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 数据提供者接口。</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;typeparam name&#x3D;&quot;T&quot;&gt;数据提供者的持有者的类型。&lt;&#x2F;typeparam&gt;</span><br><span class="line">public interface IDataProvider&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 读取数据成功事件。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    event EventHandler&lt;ReadDataSuccessEventArgs&gt; ReadDataSuccess;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 读取数据失败事件。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    event EventHandler&lt;ReadDataFailureEventArgs&gt; ReadDataFailure;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 读取数据更新事件。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    event EventHandler&lt;ReadDataUpdateEventArgs&gt; ReadDataUpdate;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 读取数据时加载依赖资源事件。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    event EventHandler&lt;ReadDataDependencyAssetEventArgs&gt; ReadDataDependencyAsset;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 读取数据。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAssetName&quot;&gt;内容资源名称。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;priority&quot;&gt;加载数据资源的优先级。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt;</span><br><span class="line">    void ReadData(string dataAssetName, int priority, object userData);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 解析内容。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataBytes&quot;&gt;要解析的内容二进制流。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;startIndex&quot;&gt;内容二进制流的起始位置。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;length&quot;&gt;内容二进制流的长度。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否解析内容成功。&lt;&#x2F;returns&gt;</span><br><span class="line">    bool ParseData(byte[] dataBytes, int startIndex, int length, object userData);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 数据提供者辅助器接口。</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">public interface IDataProviderHelper&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 读取数据。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAssetName&quot;&gt;内容资源名称。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAsset&quot;&gt;内容资源。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否读取数据成功。&lt;&#x2F;returns&gt;</span><br><span class="line">    bool ReadData(T dataProviderOwner, string dataAssetName, object dataAsset, object userData);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 读取数据。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAssetName&quot;&gt;内容资源名称。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataBytes&quot;&gt;内容二进制流。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;startIndex&quot;&gt;内容二进制流的起始位置。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;length&quot;&gt;内容二进制流的长度。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否读取数据成功。&lt;&#x2F;returns&gt;</span><br><span class="line">    bool ReadData(T dataProviderOwner, string dataAssetName, byte[] dataBytes, int startIndex, int length, object userData);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 解析内容。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataString&quot;&gt;要解析的内容字符串。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否解析内容成功。&lt;&#x2F;returns&gt;</span><br><span class="line">    bool ParseData(T dataProviderOwner, string dataString, object userData);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 解析内容。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataBytes&quot;&gt;要解析的内容二进制流。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;startIndex&quot;&gt;内容二进制流的起始位置。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;length&quot;&gt;内容二进制流的长度。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否解析内容成功。&lt;&#x2F;returns&gt;</span><br><span class="line">    bool ParseData(T dataProviderOwner, byte[] dataBytes, int startIndex, int length, object userData);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 释放内容资源。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAsset&quot;&gt;要释放的内容资源。&lt;&#x2F;param&gt;</span><br><span class="line">    void ReleaseDataAsset(T dataProviderOwner, object dataAsset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EventPool-事件池"><a href="#EventPool-事件池" class="headerlink" title="EventPool 事件池"></a>EventPool 事件池</h3><p>实现事件接口：订阅，取消订阅，抛出事件，立即抛出事件</p><ol><li>Fire 抛出事件：线程安全，将待执行事件放入队列，下一帧执行</li><li>FireNow 立即抛出事件：线程不安全</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; 摘要:</span><br><span class="line">&#x2F;&#x2F;     事件管理器接口。</span><br><span class="line">public interface IEventManager</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 摘要:</span><br><span class="line">    &#x2F;&#x2F;     抛出事件，这个操作是线程安全的，即使不在主线程中抛出，也可保证在主线程中回调事件处理函数，但事件会在抛出后的下一帧分发。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 参数:</span><br><span class="line">    &#x2F;&#x2F;   sender:</span><br><span class="line">    &#x2F;&#x2F;     事件源。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;   e:</span><br><span class="line">    &#x2F;&#x2F;     事件参数。</span><br><span class="line">    void Fire(object sender, GameEventArgs e);</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 摘要:</span><br><span class="line">    &#x2F;&#x2F;     抛出事件立即模式，这个操作不是线程安全的，事件会立刻分发。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 参数:</span><br><span class="line">    &#x2F;&#x2F;   sender:</span><br><span class="line">    &#x2F;&#x2F;     事件源。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;   e:</span><br><span class="line">    &#x2F;&#x2F;     事件参数。</span><br><span class="line">    void FireNow(object sender, GameEventArgs e);</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 摘要:</span><br><span class="line">    &#x2F;&#x2F;     设置默认事件处理函数。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 参数:</span><br><span class="line">    &#x2F;&#x2F;   handler:</span><br><span class="line">    &#x2F;&#x2F;     要设置的默认事件处理函数。</span><br><span class="line">    void SetDefaultHandler(EventHandler&lt;GameEventArgs&gt; handler);</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 摘要:</span><br><span class="line">    &#x2F;&#x2F;     订阅事件处理函数。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 参数:</span><br><span class="line">    &#x2F;&#x2F;   id:</span><br><span class="line">    &#x2F;&#x2F;     事件类型编号。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;   handler:</span><br><span class="line">    &#x2F;&#x2F;     要订阅的事件处理函数。</span><br><span class="line">    void Subscribe(int id, EventHandler&lt;GameEventArgs&gt; handler);</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 摘要:</span><br><span class="line">    &#x2F;&#x2F;     取消订阅事件处理函数。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 参数:</span><br><span class="line">    &#x2F;&#x2F;   id:</span><br><span class="line">    &#x2F;&#x2F;     事件类型编号。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;   handler:</span><br><span class="line">    &#x2F;&#x2F;     要取消订阅的事件处理函数。</span><br><span class="line">    void Unsubscribe(int id, EventHandler&lt;GameEventArgs&gt; handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h3><p>对Log进行封装，ILogHelper对Log的具体实现</p><h3 id="ReferencePool-引用池"><a href="#ReferencePool-引用池" class="headerlink" title="ReferencePool 引用池"></a>ReferencePool 引用池</h3><p>为了降低因大量产生类对象而导致的内存分配，设计了引用池的概念，来将用完的对象清理并缓存起来，供后续使用。<br>实现IReference接口，通过ReferencePool.Acquire<T>()获取</p><h3 id="TaskPool-任务池"><a href="#TaskPool-任务池" class="headerlink" title="TaskPool 任务池"></a>TaskPool 任务池</h3><p>这个任务池主要做资源异步加载，下载等异步操作的任务<br>-TaskBase：只是任务数据<br>-ITaskAgent：任务代理，处理任务的具体行为<br>如DownloadAgent.cs处的使用，Agent只处理该Task中数据，并在执行中通知对应Helper执行具体下载逻辑<br>-TaskInfo：用于Debug等展示的信息<br>-TaskPool：任务池,管理ITaskAgent并执行</p><h3 id="Variable-变量"><a href="#Variable-变量" class="headerlink" title="Variable 变量"></a>Variable 变量</h3><p>变量封装</p><h3 id="Version-版本号"><a href="#Version-版本号" class="headerlink" title="Version 版本号"></a>Version 版本号</h3><p>方便版本号管理，版本号在资源更新时需要使用，判断旧资源与新资源的版本号。</p><h3 id="封装的基础类型"><a href="#封装的基础类型" class="headerlink" title="封装的基础类型"></a>封装的基础类型</h3><table><thead><tr><th align="left">类</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">GaneFrameworkAction</td><td align="left">封装多参数委托</td></tr><tr><td align="left">GameFrameworkFunc</td><td align="left">封装多参数委托</td></tr><tr><td align="left">GameFrameworkEntry</td><td align="left">游戏入口</td></tr><tr><td align="left">GameFrameworkEventArgs</td><td align="left">事件数据封装</td></tr><tr><td align="left">GameFrameworkException</td><td align="left">异常抛出封装</td></tr><tr><td align="left">GameFrameworkLinkedList</td><td align="left">带缓存的LinkedList（链表）</td></tr><tr><td align="left">GameFrameworkLinkedListRange</td><td align="left">有范围的链表，即理解为LinkedList中的一小段</td></tr><tr><td align="left">GameFrameworkModule</td><td align="left">模块的封装基类，统一管理各类模块Manager</td></tr><tr><td align="left">GameFrameworkMultiDictionary</td><td align="left">多值字典,Value为链表</td></tr><tr><td align="left">GameFrameworkSerializer</td><td align="left">序列化器,</td></tr></tbody></table><h2 id="Config层"><a href="#Config层" class="headerlink" title="Config层"></a>Config层</h2><p>经过了对Base层的理解，Config层就很轻松弄明白了。<br>主要封装了数据读取，解析，获取。<br>执行顺序：<br>ConfigManager.ReadData()-&gt;IDataProvider.ReadData()-&gt;读取成功后-&gt;IDataProviderHelper.ReadData()，<br>ConfigManager.ParseData()-&gt;IDataProvider.ParseData()-&gt;IDataProviderHelper.ParseData()<br>使用上只需要：修改对应Helper即可</p><h2 id="DataNode层"><a href="#DataNode层" class="headerlink" title="DataNode层"></a>DataNode层</h2><p>树状数据节点，个人使用最多就是GetOrAddNode(string)</p><h2 id="DataTable层"><a href="#DataTable层" class="headerlink" title="DataTable层"></a>DataTable层</h2><p>-使用DataTable，扩展一下可以很方便与excel使用<br>-实现Helper类解析Excel产生的bytes数据即可</p><table><thead><tr><th align="left">接口</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">IDataTable</td><td align="left">表(数据容器,管理多条数据)</td></tr><tr><td align="left">IDataRow</td><td align="left">数据项(一条数据)</td></tr><tr><td align="left">IDataHelper</td><td align="left">数据解析帮助类</td></tr><tr><td align="left">IDataTableManager</td><td align="left">管理所有表</td></tr></tbody></table><h2 id="Debugger层"><a href="#Debugger层" class="headerlink" title="Debugger层"></a>Debugger层</h2><p>运行时的Debugger界面，使用上很方便，具体就是打印多种不同信息</p><h2 id="Download层"><a href="#Download层" class="headerlink" title="Download层"></a>Download层</h2><p>下载任务都是异步操作，因此需要等待，这时Base层定义好的TaskPool就有了作用</p>]]></content>
    
    
    <summary type="html">GF的dll层源码解析，学习设计思路，学习代码规范</summary>
    
    
    
    <category term="Unity" scheme="https://skierhou.github.io/categories/Unity/"/>
    
    <category term="GameFramework" scheme="https://skierhou.github.io/categories/Unity/GameFramework/"/>
    
    
    <category term="Unity" scheme="https://skierhou.github.io/tags/Unity/"/>
    
    <category term="GameFramework" scheme="https://skierhou.github.io/tags/GameFramework/"/>
    
  </entry>
  
</feed>
