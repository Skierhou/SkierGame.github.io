<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SkierHou</title>
  
  <subtitle>123</subtitle>
  <link href="https://skierhou.github.io/atom.xml" rel="self"/>
  
  <link href="https://skierhou.github.io/"/>
  <updated>2021-03-10T04:41:36.795Z</updated>
  <id>https://skierhou.github.io/</id>
  
  <author>
    <name>Skier</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Addressable 深度理解与使用</title>
    <link href="https://skierhou.github.io/2021/03/05/Unity/Resource/Addressable/"/>
    <id>https://skierhou.github.io/2021/03/05/Unity/Resource/Addressable/</id>
    <published>2021-03-05T06:30:01.000Z</published>
    <updated>2021-03-10T04:41:36.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Addressable是什么"><a href="#Addressable是什么" class="headerlink" title="Addressable是什么"></a>Addressable是什么</h2><p>是Unity官方出的资源管理器，Addressable即可寻址的资源系统<br>Addressable的优点：</p><ul><li>通过一个key，可以直接获取资源，不需要在意资源的实际位置</li><li>有完整的可视化界面，不需要写大量资源管理代码即可管理资源</li><li>方便自定义打包，自带增量更新等</li></ul><h2 id="Addressable的使用心得"><a href="#Addressable的使用心得" class="headerlink" title="Addressable的使用心得"></a>Addressable的使用心得</h2><ul><li><p>操作界面入口<br><img src="/blog/2021/03/05/Unity/Resource/Addressable/01.png" alt="Tools" title="Tools"></p></li><li><p>初次打开需要创建Setting之后会看到Assets目录下的文件结构，先做简单介绍后面在工具使用时会依次讲到所有资源文件使用方式</p><table><thead><tr><th align="left">路径</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">AddressableAssetsData</td><td align="left"><strong>根目录，AddressableAssetSettings是整个Addressable设置</strong></td></tr><tr><td align="left">AddressableAssetsData/AssetGroups</td><td align="left"><strong>资源管理组，管理多个Schema处理该组内资源的读取/加载/保存等逻辑</strong></td></tr><tr><td align="left">AddressableAssetsData/AssetGroups/Schemas</td><td align="left"><strong>处理模式，处理数据的实际逻辑类，继承自AddressableAssetGroupSchema，默认提供了三个Schema，分别对应两个AssetGroups：Built In Data以及Default Local Group</strong></td></tr><tr><td align="left">AddressableAssetsData/AssetGroupTemplates</td><td align="left"><strong>这个路径下只是一个模板，在创建Group时会复制一份这个模板</strong></td></tr><tr><td align="left">AddressableAssetsData/DataBuilders</td><td align="left"><strong>在不同构建模式下，在游戏运行中的数据提供者，可选择项有InstanceProvider以及SceneProvider</strong></td></tr><tr><td align="left">AddressableAssetsData/Windows</td><td align="left"><strong>这个路径是打包才会自动生成的本地对应文件，记录上一次打包信息，可以用于增量更新，通过保存的文件判断哪些文件需要更新</strong></td></tr></tbody></table></li><li><p>Groups界面，管理所有Groups，即资源组，默认资源组存在两个:<strong>Build In Data</strong>，<strong>Default Local Group</strong>。</p><table><thead><tr><th align="left">Group</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">Build In Data</td><td align="left">点击Build In Data，对应Assets/AddressableAssetsData/AssetGroups/Build In Data.asset，只有两个设置：包含Resources路径下资源，BuildSetting设置的场景，即这部分资源会打进游戏包中，不进行资源加载，这个资源组官方已经设置好了，不需要做任何其他设置。 Build In Data.asset目前没有方式主动创建，不要误删即可（不然只能重新创建数据了）。</td></tr><tr><td align="left">Default Local Group</td><td align="left">对应Assets/AddressableAssetsData/AssetGroups/Default Local Group.asset，其中包含两个Schema：<strong>BundledAssetGroupSchema</strong>,<strong>ContentUpdateGroupSchema</strong>。 ContentUpdateSchema：只有一个设置，设置为全量更新或者增量更新，全量：更新即替换，增量：不替换原资源情况下多打一个资源包，BundledAssetGroupSchema：设置资源打包/加载路径，以及Bundle模式：crc缓存，bundle名，以什么方式分组等，通常使用默认即可</td></tr></tbody></table></li><li><p>Groups界面操作<br>资源可以通过拖拽文件夹，拖拽单个文件，或再Inspector面板直接勾选Addressable</p><table><thead><tr><th align="left">按钮</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">Profile</td><td align="left">路径配置，远程/本地的加载/构建路径，<strong>不管构建再哪个路径底下，加载Key都保持不变，这也是Addressable基本思想所在</strong></td></tr><tr><td align="left">Tools</td><td align="left">工具，可以快捷打开所有界面，关于’Check For Content Update’按钮是用于增量更新的，当group设置为增量模式，且相比较上一次存在变换，点击这个按钮增量打包，会产生一个新的资源组管理增量资源，增量打包后原资源不会删除，但对应key下的hash指向的资源会变成新包资源。</td></tr><tr><td align="left">Play Mode Script</td><td align="left">游戏中使用的资源加载模式：1.fastest：AssetsDataset加载，2.advanced：模拟ab包加载，3.requires built groups：实际ab包加载。选择每种模式后对应AddressableAssetsData/DataBuilders的构建设置也会修改，对应1.BuildScriptFastMode,2.BuildScriptPackedPlayMode,3.BuildScriptVirtualMode，其中多的一个BuildScriptPackedMode为实现构建资源时的默认构建模式</td></tr><tr><td align="left">Build</td><td align="left">New Build 下的按钮对应AddressableAssetsData/DataBuilders/BuildScriptPackedMode.asset，第二个按钮即增量更新按钮与Tools中的Content Update配合使用，Clean按钮即清除已构建的资源</td></tr></tbody></table></li><li><p>Profile 界面：管理Profile，设置打包，加载等路径</p></li><li><p>AddressableAssetSettings设置：通常使用默认即可，对应按钮名称标记很明显了，不进行详细介绍</p></li><li><p>EventViewer界面：查看运行时资源使用情况，启动时需设置AddressableAssetSettings中的Send Profiler Event</p></li><li><p>Analyze界面：用于分析资源的依赖关系，Fixable Rule：可修复的规则，分析器自动修复，UnFixable Rule：不可修复的规则，会列出来需要手动修复</p></li><li><p>Hosting界面：创建远程或者本地的服务器，方便测试，默认使用HTTP Service，查看HttpHostingService.cs代码可自定义服务器模式</p></li></ul><h2 id="Addressable的使用说明"><a href="#Addressable的使用说明" class="headerlink" title="Addressable的使用说明"></a>Addressable的使用说明</h2><h4 id="加载资源"><a href="#加载资源" class="headerlink" title="加载资源"></a>加载资源</h4><p>Addressable中加载任何资源都需要异步加载，不过可以使用Task多线程方式加载，使用非常方便。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class Test : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField]</span><br><span class="line">    private string _entryName &#x3D; &quot;Assets&#x2F;Prefabs&#x2F;Cube.prefab&quot;;</span><br><span class="line"></span><br><span class="line">    public AssetReference ar;</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 使用Task异步加载</span><br><span class="line">        StartAsync();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 使用AssetReference引用直接加载</span><br><span class="line">        ar.LoadAssetAsync&lt;GameObject&gt;().Completed +&#x3D; LoadFinish;</span><br><span class="line">        ar.InstantiateAsync(Vector3.one, Quaternion.identity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void LoadFinish(AsyncOperationHandle&lt;GameObject&gt; loadHandle)</span><br><span class="line">    &#123;</span><br><span class="line">        if (loadHandle.IsDone &amp;&amp; loadHandle.Status &#x3D;&#x3D; AsyncOperationStatus.Succeeded)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;这里Result是预制体</span><br><span class="line">            Debug.Log(loadHandle.Result);</span><br><span class="line">            Addressables.Release(loadHandle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private async Task StartAsync()</span><br><span class="line">    &#123;</span><br><span class="line">        var instance &#x3D; await Addressables.InstantiateAsync(_entryName).Task;</span><br><span class="line">        Addressables.ReleaseInstance(instance);</span><br><span class="line">        instance &#x3D; await Addressables.InstantiateAsync(_entryName).Task;</span><br><span class="line">        Addressables.ReleaseInstance(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于更新"><a href="#关于更新" class="headerlink" title="关于更新"></a>关于更新</h3><p>使用Addressables提供的接口即可完成更新检查，以及下载，详细请阅读代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">private async void UpdateAndDownLoad()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 1. 检查更新</span><br><span class="line">    AsyncOperationHandle&lt;List&lt;string&gt;&gt; updateHandle &#x3D; Addressables.CheckForCatalogUpdates(false);</span><br><span class="line">    await updateHandle.Task;</span><br><span class="line">    if (updateHandle.Status &#x3D;&#x3D; AsyncOperationStatus.Succeeded)</span><br><span class="line">    &#123;</span><br><span class="line">        updateList &#x3D; updateHandle.Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 2.开始更新</span><br><span class="line">    AsyncOperationHandle&lt;List&lt;IResourceLocator&gt;&gt; updateHandler &#x3D; Addressables.UpdateCatalogs(updateList, false);</span><br><span class="line">    await updateHandler.Task;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 3.获取更新资源的key</span><br><span class="line">    List&lt;string&gt; updateKeys &#x3D; new List&lt;string&gt;();</span><br><span class="line">    foreach (IResourceLocator locator in updateHandler.Result)</span><br><span class="line">    &#123;</span><br><span class="line">        if (locator is ResourceLocationMap map)</span><br><span class="line">        &#123;</span><br><span class="line">            foreach (var item in map.Locations)</span><br><span class="line">            &#123;</span><br><span class="line">                if (item.Value.Count &#x3D;&#x3D; 0) continue;</span><br><span class="line">                string key &#x3D; item.Key.ToString();</span><br><span class="line">                if (int.TryParse(key, out int resKey)) continue;</span><br><span class="line"></span><br><span class="line">                if (!updateKeys.Contains(key))</span><br><span class="line">                    updateKeys.Add(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 4.判断下载资源大小</span><br><span class="line">    AsyncOperationHandle&lt;long&gt; downLoadSize &#x3D; Addressables.GetDownloadSizeAsync(updateKeys);</span><br><span class="line">    await downLoadSize.Task;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 5.下载</span><br><span class="line">    AsyncOperationHandle downLoad &#x3D; Addressables.DownloadDependenciesAsync(updateKeys, MergeMode.None);</span><br><span class="line">    await downLoad.Task;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 6.清除</span><br><span class="line">    Addressables.Release(updateHandler);</span><br><span class="line">    Addressables.Release(downLoad);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Addressable的扩展"><a href="#Addressable的扩展" class="headerlink" title="Addressable的扩展"></a>Addressable的扩展</h2><h3 id="自动化打包"><a href="#自动化打包" class="headerlink" title="自动化打包"></a>自动化打包</h3><ul><li>在实际项目中资源打包通常不会人工手动设置，而是通过一些模式自动化打包，Addressable虽然提供了非常完善的功能界面，但是打包自动化还是需要用户自己扩展。以下是我个人理解的打包策略，与上篇<a href="../AssetBundle/index">AssetBundle文章</a>的一样的策略，一个文件夹下所有的资源都按当前文件夹名称设置AB包一个文件一个AB包，子文件递归设置。</li><li>Groups界面可以直接拖拽文件夹进去，但是打包设置中只有三个选项：1.一组打成一个包，2.文件夹打成一个包(一次拖进去的文件夹子目录也包括进去)，3.按标签打包。我这里使用的是按标签打包，相同标签一个包。</li><li>扩展代码请查看末尾的项目。</li></ul><p><img src="/blog/2021/03/05/Unity/Resource/Addressable/02.png" alt="default" title="标题"></p><h3 id="场景加载以及游戏物体实例化扩展"><a href="#场景加载以及游戏物体实例化扩展" class="headerlink" title="场景加载以及游戏物体实例化扩展"></a>场景加载以及游戏物体实例化扩展</h3><ul><li>Addressable默认有提供InstanceProvider以及SceneProvider，但是InstanceProvider中并没有使用到对象池，且在使用Addressables.InstantiateAsync()多次后，同样的资源引用会存在多个，可以通过EventViewer中看到资源占用的堆内存空间，通过继承IInstanceProvider以及ISceneProvider自己实现加载完实际资源后的实例化对象即可。其实就是将对象池写入IInstanceProvider，查看末尾的项目代码其中有InstanceProviderHelper.cs实现。</li></ul><blockquote><p><a href="https://github.com/Skierhou/ResourceManager">项目路径 https://github.com/Skierhou/ResourceManager</a></p></blockquote>]]></content>
    
    
    <summary type="html">Addressable原理，使用说明，扩展</summary>
    
    
    
    <category term="Unity" scheme="https://skierhou.github.io/categories/Unity/"/>
    
    <category term="Resource" scheme="https://skierhou.github.io/categories/Unity/Resource/"/>
    
    <category term="Addressable" scheme="https://skierhou.github.io/categories/Unity/Resource/Addressable/"/>
    
    
    <category term="Unity" scheme="https://skierhou.github.io/tags/Unity/"/>
    
    <category term="Addressable" scheme="https://skierhou.github.io/tags/Addressable/"/>
    
  </entry>
  
  <entry>
    <title>AssetBundle 注意事项以及使用</title>
    <link href="https://skierhou.github.io/2021/03/05/Unity/Resource/AssetBundle/"/>
    <id>https://skierhou.github.io/2021/03/05/Unity/Resource/AssetBundle/</id>
    <published>2021-03-05T06:30:01.000Z</published>
    <updated>2021-03-10T02:11:57.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AssetBundle是什么"><a href="#AssetBundle是什么" class="headerlink" title="AssetBundle是什么"></a>AssetBundle是什么</h2><p>AssetBundle是Unity的资源管理包，用于资源加载卸载。<br>AssetBundle分为数据头和数据段：</p><ul><li>数据头：存储一些设置，如压缩类型，索引，manifest等</li><li>数据段：存储序列化后Asset数据</li></ul><p>AssetBundle的优点：</p><ul><li>自带压缩算法</li><li>方便管理，适合增量更新</li><li>可随意加载卸载Asset</li><li>内部包含Asset的引用关系，不需要怕引用丢失</li></ul><h2 id="AssetBundle的压缩"><a href="#AssetBundle的压缩" class="headerlink" title="AssetBundle的压缩"></a>AssetBundle的压缩</h2><p>压缩格式分为：LZ4，LZMA</p><ul><li>LZMA打包成字节流，包体会比LZ4小</li><li>LZMA打包运行时占用运行内存空间会比LZ4大很多,在使用是LZMA包在初始化时先解压再压缩成LZ4使用，个人理解实际情况：LZMA解压完的数据会先存在内存中，再压缩成LZ4，但是使用时又需要将LZ4解压，感觉上是极度没必要的。</li><li>通常情况下使用LZ4打包，不需要考虑太多内存空间的事，只是包体会稍微大一些</li></ul><h2 id="AssetBundle的读取"><a href="#AssetBundle的读取" class="headerlink" title="AssetBundle的读取"></a>AssetBundle的读取</h2><p>有两种方式LoadFromMemory，LoadFromFile</p><ul><li>LoadFromMemory：需要反复读取byte数组，会有额外的内存消耗</li><li>LoadFromFile: 直接从硬盘文件中读取，注意：LoadFromFile在Editor模式下会直接读取整个AssetBundle，而运行时只会读取AssetBundle的头数据，在Editor下性能分析需要注意这一项</li></ul><h2 id="AssetBundle的卸载"><a href="#AssetBundle的卸载" class="headerlink" title="AssetBundle的卸载"></a>AssetBundle的卸载</h2><p>AssetBundle.UnLoad(bool unloadAllLoadedObject)</p><ul><li>卸载时需要注意，当使用UnLoad(false)，且有实际使用资源时，该资源并不会卸载会缓存一份，再下一次加载出AssetBundle时，会复制另一份资源，导致同样的资源内存中存在两份。</li><li>卸载时使用UnLoad(true),会卸载所有加载资源，使用这类资源的将丢失，但是下一次加载出AssetBundle时，内存中只会有一份资源</li></ul><h2 id="AssetBundle的依赖关系"><a href="#AssetBundle的依赖关系" class="headerlink" title="AssetBundle的依赖关系"></a>AssetBundle的依赖关系</h2><p>编辑器下由AssetDatabase 和 AssetImporter管理，AssetDatabase管理依赖，AssetImporter为AssetBundle数据</p><ul><li>通过AssetDatabase.GetDependencies(path) 来获取该Asset的依赖文件</li><li>通过AssetImporter可以修改Asset的AssetBundle设置</li><li>实际打包时，会将Asset的依赖关系打进manifest文件，但是加载一个AssetBundle时Unity并不会将其依赖AssetBundle一同加载出来，需要自己主动进行管理</li></ul><h2 id="AssetBundle在项目中使用"><a href="#AssetBundle在项目中使用" class="headerlink" title="AssetBundle在项目中使用"></a>AssetBundle在项目中使用</h2><p>通常在实际项目中使用并不会去手动一一设置AssetBundle名称再进行打包，而会根据项目需求自定义打包模式，下面由我介绍一下个人感觉非常实用的打包策略。</p><ul><li>将一个文件夹路径下所有的文件统一自动打成AssetBundle包，所有Asset按文件夹名称设置ABName并递归所有子文件夹，使用这种做法只需要管理好项目资源的目录结构就可以很好管理AssetBundle了</li><li>在打包的同时将保存所有Asset的数据：crc, path, assetName, assetBundleName, dependceAssetBundles。保存成二进制一同打进config包中,游戏启动先加载config，在加载一个资源时再加载对应包以及依赖包即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[System.Serializable]</span><br><span class="line">public class AssetBundleConfig</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 资源路径转crc</span><br><span class="line">    public uint crc;</span><br><span class="line">    &#x2F;&#x2F; 资源路径</span><br><span class="line">    public string path;</span><br><span class="line">    &#x2F;&#x2F; 资源包名</span><br><span class="line">    public string assetBundleName;</span><br><span class="line">    &#x2F;&#x2F; 资源名：从资源包中加载的名称</span><br><span class="line">    public string assetName;</span><br><span class="line">    &#x2F;&#x2F; 依赖包</span><br><span class="line">    public List&lt;string&gt; dependceAssetBundles;</span><br><span class="line">&#125;</span><br><span class="line">[System.Serializable]</span><br><span class="line">public class AssetBundleContainer</span><br><span class="line">&#123;</span><br><span class="line">    public List&lt;AssetBundleConfig&gt; configList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现两个管理器AssetBundleManager，以及ResourceManager，使用时ResourceManager按路径加载资源，ResourceManager从AssetBundleManager拿到AssetBundle包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public interface IAssetBundleManager</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 同步加载AB包</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    AssetBundle LoadAssetBundle(string assetBundleName);</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 异步加载AB包</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    void LoadAssetBundleAsync(string assetBundleName, Action&lt;AssetBundle&gt; callback);</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 卸载AB包</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    void UnLoadAssetBundle(string assetBundleName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface IResourceManager</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 同步加载资源</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    T LoadAsset&lt;T&gt;(string path) where T : UnityEngine.Object;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 异步加载资源</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    void LoadAssetAsync(string path, Action&lt;UnityEngine.Object, object&gt; onLoaded, int priority &#x3D; 0, object userData &#x3D; null);</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 卸载资源</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    void UnLoadAsset(string path, bool isDestroy &#x3D; false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><a href="https://github.com/Skierhou/ResourceManager">项目路径 https://github.com/Skierhou/ResourceManager</a></p></blockquote>]]></content>
    
    
    <summary type="html">AssetBundle使用以及扩展</summary>
    
    
    
    <category term="Unity" scheme="https://skierhou.github.io/categories/Unity/"/>
    
    <category term="Resource" scheme="https://skierhou.github.io/categories/Unity/Resource/"/>
    
    <category term="AssetBundle" scheme="https://skierhou.github.io/categories/Unity/Resource/AssetBundle/"/>
    
    
    <category term="Unity" scheme="https://skierhou.github.io/tags/Unity/"/>
    
    <category term="AssetBundle" scheme="https://skierhou.github.io/tags/AssetBundle/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基础语法</title>
    <link href="https://skierhou.github.io/2021/03/02/Base/markdown/"/>
    <id>https://skierhou.github.io/2021/03/02/Base/markdown/</id>
    <published>2021-03-02T06:30:01.000Z</published>
    <updated>2021-03-10T04:40:45.030Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>初于方便写文章考虑，整理一下markdown语法规则 <a href="https://www.jianshu.com/p/191d1e21f7ed">转载链接</a></p></blockquote><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*&#96;</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用</span><br><span class="line">&gt;&gt; 引用</span><br><span class="line">&gt;&gt;&gt; 引用</span><br></pre></td></tr></table></figure><blockquote><p>引用</p><blockquote><p>引用</p><blockquote><p>引用</p></blockquote></blockquote></blockquote><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><hr><hr><hr><hr><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</span><br><span class="line">参考：![default](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;butterfly-extsrc@1&#x2F;img&#x2F;default.jpg &quot;标题&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/npm/butterfly-extsrc@1/img/default.jpg" alt="default" title="标题"></p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">参考：[简书](http:&#x2F;&#x2F;jianshu.com)</span><br></pre></td></tr></table></figure><p><a href="http://jianshu.com/">简书</a></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">无序： * - +</span><br><span class="line">有序： 1. 2. 3.</span><br></pre></td></tr></table></figure><ul><li>无序</li><li>无序</li><li>无序</li></ul><ol><li>有序</li><li>有序</li><li>有序</li></ol><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th align="center">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr></tbody></table><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(&#96;&#96;&#96;)</span><br><span class="line">    代码块...</span><br><span class="line">(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;sequence</span><br><span class="line">Title:时序图示例</span><br><span class="line">客户端-&gt;服务端: 我想找你拿下数据 SYN</span><br><span class="line">服务端--&gt;客户端: 我收到你的请求啦 ACK+SYN</span><br><span class="line">客户端-&gt;&gt;服务端: 我收到你的确认啦，我们开始通信吧 ACK</span><br><span class="line">Note right of 服务端: 我是一个服务端</span><br><span class="line">Note left of 客户端: 我是一个客户端</span><br><span class="line">Note over 服务端,客户端: TCP 三次握手</span><br><span class="line">participant 观察者</span><br><span class="line"></span><br><span class="line">这里也不支持流程图</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;初于方便写文章考虑，整理一下markdown语法规则 &lt;a href=&quot;https://www.jianshu.com/p/191d1e21f7ed&quot;&gt;转载链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="通用" scheme="https://skierhou.github.io/categories/%E9%80%9A%E7%94%A8/"/>
    
    
    <category term="Markdown" scheme="https://skierhou.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>2021年规划</title>
    <link href="https://skierhou.github.io/2021/03/01/Plan/plan2021/"/>
    <id>https://skierhou.github.io/2021/03/01/Plan/plan2021/</id>
    <published>2021-03-01T06:30:01.000Z</published>
    <updated>2021-03-10T02:11:57.036Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每年需持续整理个人任务，个人任务可以规划为年度任务，月任务，详细再到周任务<br>记录个人任务完成情况，如未完成，需写下原因以检讨<br>在工作空闲时间，假期，周末等时期完成的任务</p></blockquote><h1 id="年度任务规划"><a href="#年度任务规划" class="headerlink" title="年度任务规划"></a>年度任务规划</h1><table><thead><tr><th align="left">任务描述</th><th align="center">完成情况(%)</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left"><strong>客户端方向</strong></td><td align="center"></td><td align="left"></td></tr><tr><td align="left">Dots技术栈深度学习，需要能做到运用到项目中去，使用Dots制作鱼群，鸟群等效果Demo</td><td align="center">10%</td><td align="left">目前已掌握基础使用</td></tr><tr><td align="left">EGameTang框架深度学习，掌握EGameTang网络架构原理并制作联机RPGDemo</td><td align="center">10%</td><td align="left">目前已掌握基础使用</td></tr><tr><td align="left">GameFramework框架深度学习，学习其代码规范，底层原理，架构思想</td><td align="center">50%</td><td align="left">目前以运用于项目中</td></tr><tr><td align="left">Ability技能系统搭建完成，并完成多个模式的Demo</td><td align="center">50%</td><td align="left">技能系统已搭建，准备Demo即可</td></tr><tr><td align="left">AI行为系统的深度学习，主要参考UE4 AI系统</td><td align="center">10%</td><td align="left">掌握基本使用</td></tr><tr><td align="left">AssetBundle,Addressable的深度学习</td><td align="center">40%</td><td align="left"></td></tr><tr><td align="left"><strong>TA方向</strong></td><td align="center"></td><td align="left"></td></tr><tr><td align="left">OpenGL，看完书籍红皮书，蓝皮书</td><td align="center">10%</td><td align="left"></td></tr><tr><td align="left">UnityShader，光照GI，渲染管线</td><td align="center">20%</td><td align="left"></td></tr><tr><td align="left">Unity实现天气系统</td><td align="center">0%</td><td align="left"></td></tr><tr><td align="left">PS，基本使用</td><td align="center">0%</td><td align="left"></td></tr><tr><td align="left">3DMax，基本使用</td><td align="center">0%</td><td align="left"></td></tr><tr><td align="left">粒子特效制作</td><td align="center">0%</td><td align="left"></td></tr><tr><td align="left"><strong>整体技术方向</strong></td><td align="center"></td><td align="left"></td></tr><tr><td align="left">完成一款游戏Demo,未来考虑长期制作并发布的Demo</td><td align="center">0%</td><td align="left"></td></tr></tbody></table><h1 id="月任务规划"><a href="#月任务规划" class="headerlink" title="月任务规划"></a>月任务规划</h1><table><thead><tr><th align="center">时间(月)</th><th align="center">任务描述</th><th align="center">完成情况(%)</th><th align="center">注释</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">无</td><td align="center">无</td><td align="center">3月启动</td></tr><tr><td align="center">2</td><td align="center">无</td><td align="center">无</td><td align="center">3月启动</td></tr><tr><td align="center">3</td><td align="center">1.GF框架深度学习，代码解剖；2.PS,3DMax,粒子特效制作；3.AssetBundle,Addressable的深度学习</td><td align="center">0%</td><td align="center"></td></tr><tr><td align="center">4</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">5</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">6</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">7</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">8</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">9</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">10</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">11</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">12</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr></tbody></table><h1 id="关于生活的规划"><a href="#关于生活的规划" class="headerlink" title="关于生活的规划"></a>关于生活的规划</h1><table><thead><tr><th align="left">任务描述</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left"><strong>年度目标</strong></td><td align="left"></td></tr><tr><td align="left">改善肠胃，健身，增肥20斤</td><td align="left"></td></tr><tr><td align="left">存钱***元</td><td align="left"></td></tr><tr><td align="left"><strong>月目标</strong></td><td align="left"></td></tr><tr><td align="left">每月消费&lt;4500 (包括房租)</td><td align="left"></td></tr><tr><td align="left">每月增重&gt;2斤</td><td align="left"></td></tr><tr><td align="left"><strong>日目标</strong></td><td align="left"></td></tr><tr><td align="left">每日消费&lt;60</td><td align="left"></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">每年需整理的任务规划</summary>
    
    
    
    <category term="年度规划" scheme="https://skierhou.github.io/categories/%E5%B9%B4%E5%BA%A6%E8%A7%84%E5%88%92/"/>
    
    
    <category term="Plan" scheme="https://skierhou.github.io/tags/Plan/"/>
    
  </entry>
  
  <entry>
    <title>GameFramework 底层解析</title>
    <link href="https://skierhou.github.io/2021/03/01/Unity/GameFramework/GF1/"/>
    <id>https://skierhou.github.io/2021/03/01/Unity/GameFramework/GF1/</id>
    <published>2021-03-01T06:30:01.000Z</published>
    <updated>2021-03-10T02:11:57.062Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对GF的源码解析，学习设计思路，学习代码规范 <a href="https://gameframework.cn/">GF官网</a> <a href="https://gameframework.cn/api/index.html">GF-API</a><br>看了GF的源码，感觉自己之前写的代码都是一堆垃圾!!!<br>源码阅读建议：与<a href="https://github.com/EllanJiang/StarForce">StarForce</a>项目一同阅读</p></blockquote><h2 id="Base层"><a href="#Base层" class="headerlink" title="Base层"></a>Base层</h2><p>数据处理器，序列化工具，Log，事件池，引用池，任务代理池，其他扩展：Action，Func，变量封装(用于自定义数据结构)，自定义链表</p><h3 id="DataProvider-数据处理器"><a href="#DataProvider-数据处理器" class="headerlink" title="DataProvider 数据处理器"></a>DataProvider 数据处理器</h3><p>主要细节只需要看IDataProvider，IDataProviderHelper的实现上<br>IDataProvider，IDataProviderHelper主要实现2个接口：ReadData，ParseData</p><ol><li>IDataProvider 从ResourceManager中读取资源，为数据提供者</li><li>IDataProviderHelper负责对具体数据的解析，为数据提供者帮助接口，<strong>用户使用上只需要实现帮助类即可</strong><br>对于IDataProviderHelper可能会引起误区，这里的ReadData是在IDataProvider读取资源成功时调用，这时已经拿到了需要的资源，可以直接使用或者再主动调用ParseData解析数据再使用。</li><li>执行顺序如：<br>ConfigManager.ReadData()-&gt;IDataProvider.ReadData()-&gt;读取成功后-&gt;IDataProviderHelper.ReadData()，<br>这时主动调用ConfigManager.ParseData()-&gt;IDataProvider.ParseData()-&gt;IDataProviderHelper.ParseData()</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">IDataProvider</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 数据提供者接口。</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;typeparam name&#x3D;&quot;T&quot;&gt;数据提供者的持有者的类型。&lt;&#x2F;typeparam&gt;</span><br><span class="line">public interface IDataProvider&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 读取数据成功事件。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    event EventHandler&lt;ReadDataSuccessEventArgs&gt; ReadDataSuccess;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 读取数据失败事件。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    event EventHandler&lt;ReadDataFailureEventArgs&gt; ReadDataFailure;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 读取数据更新事件。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    event EventHandler&lt;ReadDataUpdateEventArgs&gt; ReadDataUpdate;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 读取数据时加载依赖资源事件。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    event EventHandler&lt;ReadDataDependencyAssetEventArgs&gt; ReadDataDependencyAsset;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 读取数据。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAssetName&quot;&gt;内容资源名称。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;priority&quot;&gt;加载数据资源的优先级。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt;</span><br><span class="line">    void ReadData(string dataAssetName, int priority, object userData);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 解析内容。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataBytes&quot;&gt;要解析的内容二进制流。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;startIndex&quot;&gt;内容二进制流的起始位置。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;length&quot;&gt;内容二进制流的长度。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否解析内容成功。&lt;&#x2F;returns&gt;</span><br><span class="line">    bool ParseData(byte[] dataBytes, int startIndex, int length, object userData);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 数据提供者辅助器接口。</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">public interface IDataProviderHelper&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 读取数据。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAssetName&quot;&gt;内容资源名称。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAsset&quot;&gt;内容资源。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否读取数据成功。&lt;&#x2F;returns&gt;</span><br><span class="line">    bool ReadData(T dataProviderOwner, string dataAssetName, object dataAsset, object userData);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 读取数据。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAssetName&quot;&gt;内容资源名称。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataBytes&quot;&gt;内容二进制流。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;startIndex&quot;&gt;内容二进制流的起始位置。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;length&quot;&gt;内容二进制流的长度。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否读取数据成功。&lt;&#x2F;returns&gt;</span><br><span class="line">    bool ReadData(T dataProviderOwner, string dataAssetName, byte[] dataBytes, int startIndex, int length, object userData);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 解析内容。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataString&quot;&gt;要解析的内容字符串。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否解析内容成功。&lt;&#x2F;returns&gt;</span><br><span class="line">    bool ParseData(T dataProviderOwner, string dataString, object userData);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 解析内容。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataBytes&quot;&gt;要解析的内容二进制流。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;startIndex&quot;&gt;内容二进制流的起始位置。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;length&quot;&gt;内容二进制流的长度。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否解析内容成功。&lt;&#x2F;returns&gt;</span><br><span class="line">    bool ParseData(T dataProviderOwner, byte[] dataBytes, int startIndex, int length, object userData);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 释放内容资源。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAsset&quot;&gt;要释放的内容资源。&lt;&#x2F;param&gt;</span><br><span class="line">    void ReleaseDataAsset(T dataProviderOwner, object dataAsset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EventPool-事件池"><a href="#EventPool-事件池" class="headerlink" title="EventPool 事件池"></a>EventPool 事件池</h3><p>实现事件接口：订阅，取消订阅，抛出事件，立即抛出事件</p><ol><li>Fire 抛出事件：线程安全，将待执行事件放入队列，下一帧执行</li><li>FireNow 立即抛出事件：线程不安全</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; 摘要:</span><br><span class="line">&#x2F;&#x2F;     事件管理器接口。</span><br><span class="line">public interface IEventManager</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 摘要:</span><br><span class="line">    &#x2F;&#x2F;     抛出事件，这个操作是线程安全的，即使不在主线程中抛出，也可保证在主线程中回调事件处理函数，但事件会在抛出后的下一帧分发。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 参数:</span><br><span class="line">    &#x2F;&#x2F;   sender:</span><br><span class="line">    &#x2F;&#x2F;     事件源。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;   e:</span><br><span class="line">    &#x2F;&#x2F;     事件参数。</span><br><span class="line">    void Fire(object sender, GameEventArgs e);</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 摘要:</span><br><span class="line">    &#x2F;&#x2F;     抛出事件立即模式，这个操作不是线程安全的，事件会立刻分发。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 参数:</span><br><span class="line">    &#x2F;&#x2F;   sender:</span><br><span class="line">    &#x2F;&#x2F;     事件源。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;   e:</span><br><span class="line">    &#x2F;&#x2F;     事件参数。</span><br><span class="line">    void FireNow(object sender, GameEventArgs e);</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 摘要:</span><br><span class="line">    &#x2F;&#x2F;     设置默认事件处理函数。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 参数:</span><br><span class="line">    &#x2F;&#x2F;   handler:</span><br><span class="line">    &#x2F;&#x2F;     要设置的默认事件处理函数。</span><br><span class="line">    void SetDefaultHandler(EventHandler&lt;GameEventArgs&gt; handler);</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 摘要:</span><br><span class="line">    &#x2F;&#x2F;     订阅事件处理函数。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 参数:</span><br><span class="line">    &#x2F;&#x2F;   id:</span><br><span class="line">    &#x2F;&#x2F;     事件类型编号。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;   handler:</span><br><span class="line">    &#x2F;&#x2F;     要订阅的事件处理函数。</span><br><span class="line">    void Subscribe(int id, EventHandler&lt;GameEventArgs&gt; handler);</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 摘要:</span><br><span class="line">    &#x2F;&#x2F;     取消订阅事件处理函数。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 参数:</span><br><span class="line">    &#x2F;&#x2F;   id:</span><br><span class="line">    &#x2F;&#x2F;     事件类型编号。</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;   handler:</span><br><span class="line">    &#x2F;&#x2F;     要取消订阅的事件处理函数。</span><br><span class="line">    void Unsubscribe(int id, EventHandler&lt;GameEventArgs&gt; handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h3><p>对Log进行封装，ILogHelper对Log的具体实现</p><h3 id="ReferencePool-引用池"><a href="#ReferencePool-引用池" class="headerlink" title="ReferencePool 引用池"></a>ReferencePool 引用池</h3><p>为了降低因大量产生类对象而导致的内存分配，设计了引用池的概念，来将用完的对象清理并缓存起来，供后续使用。<br>实现IReference接口，通过ReferencePool.Acquire<T>()获取</T></p><h3 id="TaskPool-任务池"><a href="#TaskPool-任务池" class="headerlink" title="TaskPool 任务池"></a>TaskPool 任务池</h3><p>这个任务池主要做资源异步加载，下载等异步操作的任务</p><ul><li>TaskBase：只是任务数据</li><li>ITaskAgent：任务代理，处理任务的具体行为<br>如DownloadAgent.cs处的使用，Agent只处理该Task中数据，并在执行中通知对应Helper执行具体下载逻辑</li><li>TaskInfo：用于Debug等展示的信息</li><li>TaskPool：任务池,管理ITaskAgent并执行</li></ul><h3 id="Variable-变量"><a href="#Variable-变量" class="headerlink" title="Variable 变量"></a>Variable 变量</h3><p>变量封装</p><h3 id="Version-版本号"><a href="#Version-版本号" class="headerlink" title="Version 版本号"></a>Version 版本号</h3><p>方便版本号管理，版本号在资源更新时需要使用，判断旧资源与新资源的版本号。</p><h3 id="封装的基础类型"><a href="#封装的基础类型" class="headerlink" title="封装的基础类型"></a>封装的基础类型</h3><table><thead><tr><th align="left">类</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">GaneFrameworkAction</td><td align="left">封装多参数委托</td></tr><tr><td align="left">GameFrameworkFunc</td><td align="left">封装多参数委托</td></tr><tr><td align="left">GameFrameworkEntry</td><td align="left">游戏入口</td></tr><tr><td align="left">GameFrameworkEventArgs</td><td align="left">事件数据封装</td></tr><tr><td align="left">GameFrameworkException</td><td align="left">异常抛出封装</td></tr><tr><td align="left">GameFrameworkLinkedList</td><td align="left">带缓存的LinkedList（链表）</td></tr><tr><td align="left">GameFrameworkLinkedListRange</td><td align="left">有范围的链表，即理解为LinkedList中的一小段</td></tr><tr><td align="left">GameFrameworkModule</td><td align="left">模块的封装基类，统一管理各类模块Manager</td></tr><tr><td align="left">GameFrameworkMultiDictionary</td><td align="left">多值字典,Value为链表</td></tr><tr><td align="left">GameFrameworkSerializer</td><td align="left">序列化器,</td></tr></tbody></table><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>经过了对Base层的理解，Config层就很轻松弄明白了。<br>主要封装了数据读取，解析，获取。<br>执行顺序：<br>ConfigManager.ReadData()-&gt;IDataProvider.ReadData()-&gt;读取成功后-&gt;IDataProviderHelper.ReadData()，<br>ConfigManager.ParseData()-&gt;IDataProvider.ParseData()-&gt;IDataProviderHelper.ParseData()<br>使用上只需要：修改对应Helper即可</p><h2 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h2><p>树状数据节点，个人使用最多就是GetOrAddNode(string)</p><h2 id="DataTable"><a href="#DataTable" class="headerlink" title="DataTable"></a>DataTable</h2><ul><li>使用DataTable，扩展一下可以很方便与excel使用</li><li>实现Helper类解析Excel产生的bytes数据即可</li></ul><table><thead><tr><th align="left">接口</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">IDataTable</td><td align="left">表(数据容器,管理多条数据)</td></tr><tr><td align="left">IDataRow</td><td align="left">数据项(一条数据)</td></tr><tr><td align="left">IDataHelper</td><td align="left">数据解析帮助类</td></tr><tr><td align="left">IDataTableManager</td><td align="left">管理所有表</td></tr></tbody></table><h2 id="Debugger"><a href="#Debugger" class="headerlink" title="Debugger"></a>Debugger</h2><p>运行时的Debugger界面，使用上很方便，具体就是打印多种不同信息</p><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p>下载任务都是异步操作，因此需要等待，这时Base层定义好的TaskPool就有了作用<br>下载步骤：</p><ol><li>DownloadTask携带下载数据：下载路径，保存路径，下载状态，缓冲区大小等</li><li>DownloadAgent处理任务数据，监听下载状态变化：下载数据更新，下载长度更新，下载完成，下载失败</li><li>IDownloadAgentHelper实现实际下载逻辑，如UnityWebRequestDownloadAgentHelper为例,使用UnityWebRequest发送实际下载请求，DownloadHandler抛出下载数据更新事件</li><li>DownloadCounter计算下载速度</li><li>IDownloadManager即下载管理器，管理任务池以及开放对应下载接口</li></ol><h2 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h2><p>Entity即实体<br>EntityManager-&gt;EntityGroup-&gt;Entity<br>每个Entity有独一无二的id，Manager通过字典存储，方便管理Entity<br>每个EntityManager管理EntityGroup,EntityGroup只管理组内的Entity<br>每个Entity实际生成时通过EntityGroup中的对象池子管理<br>ShowEntity流程：ReourcesManager加载资源-&gt;IEntityHelper实例化-&gt;注册进EntityGroup的对象池中-&gt;调用Entity生命周期函数OnInit-&gt;OnShow</p><h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><p>对Base层的EventPool的一层封装</p><h2 id="FileSystem"><a href="#FileSystem" class="headerlink" title="FileSystem"></a>FileSystem</h2><ul><li>FileSystem对应一个物理文件,其中保存多个文件数据,每个文件数据可理解为一个数据类型的二进制数据，加载时解析成对应类型的数据<br>其中有一个概念数据块，即每一个文件数据都是一个数据块，但是当同名数据更新时，文件数据会更换一个空闲块进行存储。</li><li>IFileSystem fileSystem = fileSystemComponent.CreateFileSystem(fullPath, FileSystemAccess.ReadWrite, maxFileCount, maxBlockCount);<br>创建文件系统时，输入的maxFileCount，以及maxBlockCount对应最大文件个数以及最大数据块个数，目前FileSystem还不支持文件系统自动扩容，需一开始设定好，且maxFileCount &lt;= maxBlockCount，在更新文件数据时会更换数据块，因此更新越频繁的数据maxBlockCount需要越大，以保证数据更新有足够的碎片空间进行修改。</li></ul><h2 id="FSM"><a href="#FSM" class="headerlink" title="FSM"></a>FSM</h2><p>有限状态机</p><h2 id="Localization"><a href="#Localization" class="headerlink" title="Localization"></a>Localization</h2><p>本地化语言,实现上与Config类似，只是在不同Language下读取不同的文件下存储的keyValue</p><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><table><thead><tr><th align="left">接口</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">INetworkManager</td><td align="left">管理NetworkChannel</td></tr><tr><td align="left">INetworkChannel</td><td align="left">建立链接，处理消息接收发送</td></tr><tr><td align="left">INetworkChannelHelper</td><td align="left">消息序列化反序列化帮助类</td></tr><tr><td align="left">IPacketHandler</td><td align="left">处理协议，每个协议有其ID，通过ID区分</td></tr><tr><td align="left">IPacketHeader</td><td align="left">消息头部信息主要记录长度，可自行添加头部信息携带数据，实际消息存在长度，发包是存在数据的粘包以及分包，这时需要头部信息判断消息是否接收完毕</td></tr></tbody></table><ul><li>使用上，客户端需要链接几处服务器就创建几个INetworkChannel分别链接，发消息也是同样每个链接处理各自的消息如：实际服务器一般存在：Gate服务器，Game服务器，Chat服务器，Friend服务器等等，使用NetworkManager可以很方便管理这种分布式服务器的链接</li><li>使用网络通信的数据结构最好使用protobuf，是目前最适合用于网络通信的数据结构，可以参考<a href="https://github.com/EllanJiang/StarForce">StarForce</a>中Network模块心跳包实现</li><li>发送以及接收消息都是异步的，且客户端收到消息在非主线程，需要事件系统通过线程安全方式抛出</li></ul><h2 id="ObjectPool"><a href="#ObjectPool" class="headerlink" title="ObjectPool"></a>ObjectPool</h2><p>对象池，其中有提供CreateSingleSpawnObjectPool，CreateMultiSpawnObjectPool<br>理解为：池子里的资源<strong>能够同时被使用一次或使用多次</strong>，缓存资源在Spawn后以及Release前都算是在使用下，MultiSpawnObjectPool能多次Spawn同一资源(目前还没使用过，感觉没什么作用，我目前理解为这个池子只管理了一个缓存资源，在任何情况下都能Spawn出来使用)，SingleSpawnObjectPool是我们通常情况下的对象池。</p><h2 id="Procedure"><a href="#Procedure" class="headerlink" title="Procedure"></a>Procedure</h2><p>游戏进程管理，是FSM的实现，可以参考<a href="https://github.com/EllanJiang/StarForce">StarForce</a>的游戏启动流程</p><h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><ul><li>资源管理模块设计整个框架，几乎每个模块都使用到资源管理器，普通的资源管理只是提供资源打包，加载，卸载等操作，这个强大的资源管理器还提供了可视化操作界面，资源使用分析，以及资源更新处理。</li><li>资源模式一共有三种：单机模式，预下载的可更新模式，使用时下载的可更新模式。 关于三种模式的使用方法参考<a href="https://github.com/EllanJiang/StarForce">StarForce</a>的启动流程，非常详细。</li><li>关于资源组的思想，资源组类似于Unity中的AssetBundle包即压缩包，一个包里包含多个资源文件，方便管理。</li></ul><h2 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h2><p>场景加载，卸载管理，对ResourceManager的LoadScene，UnLoadScene封装了一层</p><h2 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h2><p>游戏设置，与Config实现类似</p><h2 id="Sound"><a href="#Sound" class="headerlink" title="Sound"></a>Sound</h2><p>非常好用的音效管理器，高效，简洁，功能强大</p><table><thead><tr><th align="left">接口</th><th align="left">注释</th></tr></thead><tbody><tr><td align="left">ISoundAgent</td><td align="left">一个音效有一个代理，内部逻辑代理接口，主要负责处理声音开启暂停等</td></tr><tr><td align="left">ISoundAgentHelper</td><td align="left">声音播放实际逻辑</td></tr><tr><td align="left">ISoundGroup</td><td align="left">声音组</td></tr><tr><td align="left">ISoundGroupHelper</td><td align="left">声音组帮助器，<a href="https://github.com/EllanJiang/StarForce">StarForce</a>提供默认用于处理混音的组</td></tr><tr><td align="left">ISoundHelper</td><td align="left">释放资源</td></tr><tr><td align="left">ISoundManager</td><td align="left">管理音效播放，暂停，恢复以及音效组</td></tr></tbody></table><h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><p>设计思路与Sound以及Entity类似，UIGroup组管理UIForm，UIManager一起管理，需要注意的是同类型UIForm可以开启多个，只单个存在的界面需要自己判断是否再次开启，可以参考Demo中的写法</p><h2 id="Utility"><a href="#Utility" class="headerlink" title="Utility"></a>Utility</h2><p>提供了各种通用函数，方便使用</p><h2 id="WebRequest"><a href="#WebRequest" class="headerlink" title="WebRequest"></a>WebRequest</h2><p>Web请求是异步的，通过TaskPool来代理Web请求，使用上带来的好处是可以不需要使用协程，监听成功失败事件即可。</p>]]></content>
    
    
    <summary type="html">GF的dll层源码解析，学习设计思路，学习代码规范</summary>
    
    
    
    <category term="Unity" scheme="https://skierhou.github.io/categories/Unity/"/>
    
    <category term="GameFramework" scheme="https://skierhou.github.io/categories/Unity/GameFramework/"/>
    
    
    <category term="Unity" scheme="https://skierhou.github.io/tags/Unity/"/>
    
    <category term="GameFramework" scheme="https://skierhou.github.io/tags/GameFramework/"/>
    
  </entry>
  
</feed>
