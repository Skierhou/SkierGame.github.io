{"meta":{"title":"Skier","subtitle":"游戏开发","description":"游戏开发","author":"Skier","url":"https://SkierHou.github.io","root":"/blog/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-03-10T02:11:56.918Z","updated":"2021-03-10T02:11:56.918Z","comments":false,"path":"/404.html","permalink":"https://skierhou.github.io/404.html","excerpt":"","text":""},{"title":"标签","date":"2021-03-01T10:53:57.000Z","updated":"2021-03-10T05:44:23.017Z","comments":true,"path":"categories/index.html","permalink":"https://skierhou.github.io/categories/index.html","excerpt":"","text":""},{"title":"GameFramework学习","date":"2021-03-01T10:53:57.000Z","updated":"2021-03-10T02:11:56.963Z","comments":true,"path":"categories/index3.html","permalink":"https://skierhou.github.io/categories/index3.html","excerpt":"","text":""},{"title":"关于","date":"2021-03-10T05:45:15.760Z","updated":"2021-03-10T05:45:15.760Z","comments":false,"path":"about/index.html","permalink":"https://skierhou.github.io/about/index.html","excerpt":"","text":"不想当策划，美术，制作者的程序不是一个好程序"},{"title":"书单","date":"2021-03-10T02:11:56.941Z","updated":"2021-03-10T02:11:56.941Z","comments":false,"path":"books/index.html","permalink":"https://skierhou.github.io/books/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-03-10T02:11:56.994Z","updated":"2021-03-10T02:11:56.994Z","comments":false,"path":"repository/index.html","permalink":"https://skierhou.github.io/repository/index.html","excerpt":"","text":""},{"title":"link","date":"2021-03-01T11:11:07.000Z","updated":"2021-03-10T02:11:56.974Z","comments":true,"path":"link/index.html","permalink":"https://skierhou.github.io/link/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-03-10T02:11:56.985Z","updated":"2021-03-10T02:11:56.985Z","comments":true,"path":"links/index.html","permalink":"https://skierhou.github.io/links/index.html","excerpt":"","text":""},{"title":"标签1","date":"2021-03-01T11:09:41.000Z","updated":"2021-03-10T02:11:57.006Z","comments":true,"path":"tags/index.html","permalink":"https://skierhou.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ZeroMQ使用","slug":"Service/ZeroMQ使用","date":"2021-04-20T06:30:01.000Z","updated":"2021-04-20T12:17:20.978Z","comments":true,"path":"2021/04/20/Service/ZeroMQ使用/","link":"","permalink":"https://skierhou.github.io/2021/04/20/Service/ZeroMQ%E4%BD%BF%E7%94%A8/","excerpt":"","text":"ZeroMQ简介消息模型ZeroMQ将消息通信分成4种模型，分别是一对一结对模型（Exclusive-Pair）、请求回应模型（Request-Reply）、发布订阅模型（Publish-Subscribe）、推拉模型（Push-Pull）。 参考官方C#官方github Samples文章1文章2","categories":[{"name":"Service","slug":"Service","permalink":"https://skierhou.github.io/categories/Service/"}],"tags":[{"name":"ZeroMQ","slug":"ZeroMQ","permalink":"https://skierhou.github.io/tags/ZeroMQ/"}]},{"title":"KCP使用","slug":"Service/KCP网络协议使用","date":"2021-04-20T06:30:01.000Z","updated":"2021-04-25T06:27:04.258Z","comments":true,"path":"2021/04/20/Service/KCP网络协议使用/","link":"","permalink":"https://skierhou.github.io/2021/04/20/Service/KCP%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%BD%BF%E7%94%A8/","excerpt":"","text":"API介绍 表头 表头 ikcp_waitsnd 检查等待发送的消息，如果超出最大等待大小，应该断开连接 ikcp_recv kcp将接收到的kcp数据包还原成之前kcp发送的buffer数据 ikcp_input kcp接收到下层协议UDP传进来的数据底层数据buffer转换成kcp的数据包格式 ikcp_flush 将发送队列中的数据通过下层协议UDP进行发送 ikcp_send 把要发送的buffer分片成KCP的数据包格式，插入待发送队列中 ikcp_nodelay //nodelay: 0 不启用，1启用快速重传模式//interval： 内部flush刷新时间//resend: 0（默认）表示关闭。可以自己设置值，若设置为2（则2次ACK跨越将会直接重传）//nc: 是否关闭拥塞控制，0（默认）代表不关闭，1代表关闭 参考文章","categories":[{"name":"Service","slug":"Service","permalink":"https://skierhou.github.io/categories/Service/"}],"tags":[{"name":"KCP","slug":"KCP","permalink":"https://skierhou.github.io/tags/KCP/"}]},{"title":"OpenGL学习","slug":"Graphics/OpenGL","date":"2021-03-31T06:30:01.000Z","updated":"2021-03-31T05:44:17.875Z","comments":true,"path":"2021/03/31/Graphics/OpenGL/","link":"","permalink":"https://skierhou.github.io/2021/03/31/Graphics/OpenGL/","excerpt":"","text":"环境安装OpenGL安装教程计算机图形学入门教程 使用说明","categories":[{"name":"OpenGL","slug":"OpenGL","permalink":"https://skierhou.github.io/categories/OpenGL/"}],"tags":[{"name":"Graphics","slug":"Graphics","permalink":"https://skierhou.github.io/tags/Graphics/"},{"name":"OpenGL","slug":"OpenGL","permalink":"https://skierhou.github.io/tags/OpenGL/"}]},{"title":"UnityShader基础渲染知识点概况","slug":"Graphics/UnityShader","date":"2021-03-31T06:30:01.000Z","updated":"2021-04-25T08:56:39.486Z","comments":true,"path":"2021/03/31/Graphics/UnityShader/","link":"","permalink":"https://skierhou.github.io/2021/03/31/Graphics/UnityShader/","excerpt":"","text":"渲染管线前向渲染 “LightMode” = “ForwardBase”， 延迟渲染后处理灯光设置 灯光可以设置Auto/Important/UnImportant，Auto：当满足逐像素光照则为逐像素，不满足则为逐顶点，都不满足则SH处理，Important：逐像素光照，UnImportant：逐顶点光照或SH处理。 光源的Cookie：灯光照下的样子，点光源使用立方体贴图CubeMap，聚光灯使用2D贴图，使用时需要将贴图类型设置为Cookie 平行光(Directional Light)，全局平行光， 点光源(Point Light)，球形灯光，一般用SH球谐函数在ForwardBase中就算顶点光照 聚光灯(Spot Light)，锥形灯光,一般用SH球谐函数在ForwardBase中就算顶点光照 伽马(Gamma) 显示器用于颜色矫正，通常值为2.2，对颜色进行灰度，亮度矫正打个比方，功率为50%的灰色，人眼实际感知亮度为：0.5的2.2开根 = 0.7297而人眼认为的50%中灰色，实际功率为：0.5的2.2次幂 = 0.2176 Unity中可选择的颜色空间线性空间，伽马空间。 常用API记录 API 定义 注释 EnergyConservationBetweenDiffuseAndSpecular 定义于UnityStandardUtils.cgine 漫反射和镜面反射的能力守恒函数 DiffuseAndSpecularFromMetallic 定义于UnityStandardUtils.cgine 金属性设置,其中金属性参数需要标记[Gamma]，受Gamma矫正后的参数 UNITY_BDRP_PBS 定义于UnityPBSLighting.cgine 基于物理的着色，双向反射率分布函数 UNITY_LIGHT_ATTENUATION 定义于AutoLight.cginc 光照衰减值 #pragma multi_compile 多重定义宏 如#pragma multi_compile DIRECTIONAL POINT SPOT 可以define(..)判断哪些宏被定义了，然后执行特定的逻辑，C#处可以启用/关闭Shader宏：Shader.EnableKeyword(string);Shader.DisableKeyword(string); ShadeSH9 UnityCG.cginc 球谐函数， ComputeScreenPos 计算屏幕坐标 计算屏幕坐标：参数 顶点坐标 COMPUTE_EYEDEPTH 计算视野深度 计算视野深度：参数 返回值(视野深度) UNITY_DECLARE_DEPTH_TEXTURE(_CameraDepthTexture) 获取相机深度图 获取相机深度图 SAMPLE_DEPTH_TEXTURE_PROJ 采样深度图 相当于：tex2Dproj(sampler, uv).r LinearEyeDepth 线性视野深度0-1区间 ddx,ddy 求当前像素的值其临近像素上的变化率，分别对应x轴/y轴 常见效果实现记录参考基础渲染系列教程20篇UnityShader入门精要计算渐变颜色网站免费材质贴图","categories":[{"name":"UnityShader","slug":"UnityShader","permalink":"https://skierhou.github.io/categories/UnityShader/"}],"tags":[{"name":"Graphics","slug":"Graphics","permalink":"https://skierhou.github.io/tags/Graphics/"},{"name":"UnityShader","slug":"UnityShader","permalink":"https://skierhou.github.io/tags/UnityShader/"}]},{"title":"图形学基础","slug":"Graphics/图形学基础","date":"2021-03-31T06:30:01.000Z","updated":"2021-04-25T06:43:46.420Z","comments":true,"path":"2021/03/31/Graphics/图形学基础/","link":"","permalink":"https://skierhou.github.io/2021/03/31/Graphics/%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%9F%BA%E7%A1%80/","excerpt":"","text":"矩阵向量等基础3D数学知识几何变换应用（几何变换的详细计算步骤）Model Tranform(模型变换)在空间中摆放需要相机，模型等操作，放置模型。 View Tranform(视图变换)原理：将场景相机移动到坐标原点，并朝向-z方向，其他物体顶点于相机相对位置保持一致，即乘上相同的变换矩阵移动相机到坐标原点需要平移+旋转矩阵，平移矩阵可以直接通过坐标得出旋转矩阵计算步骤： 需要将原y轴旋转至(0,1,0)方向，将原z轴旋转至(0,0,-1)方向，将原x轴旋转至(1,0,0)方向 先设当前相机坐标轴表示为[X:g×t,Y:t,Z:g] (注：g×t，g叉乘t)，原点规范的坐标轴为X(1,0,0),Y(0,1,0),Z(0,0,1)。从当前旋转至规范坐标轴较为困难，但从规范坐标轴旋转至当前坐标轴非常简单，求y轴旋转：M1*(0,1,0,1)=( X(t),Y(t),Z(t),1 )求z轴旋转：M2*(0,0,-1,1)=( X(g),Y(g),Z(g),1 ) 注：朝向-z轴求x轴旋转：M3*(1,0,0,1)=( X(gxt),Y(gxt),Z(gxt),1 )M1+M2+M3最终计算的旋转矩阵如下： 得到的旋转矩阵为：规范朝向-相机当前朝向的矩阵，我们需要求出：相机当前朝向-规范朝向的矩阵，这相当于求矩阵的逆需要掌握前提条件：旋转矩阵满足一个原则，矩阵的转置=矩阵的逆。 通过转置这个矩阵得到最终旋转矩阵如下： 旋转矩阵*平移矩阵即得到最终的MV矩阵 Projection Tranform(投影变换)投影分为:正交投影(Orthographic Projection)，透视投影(Perspective Projection)。 正交投影计算过程最终目的：将可视范围移动到x:[-1,1],y:[-1,1],z:[-1,1]的原点Cube中 通过可视范围的中心点得到平移矩阵 由于正交投影：其可是范围为长方体，只需要通过缩放矩阵，将大小压缩到标准大小即可 透视投影计算过程由于透视投影的可视范围是一个锥形，为了计算压缩成长方体，再进行正交投影，原理如下图所示，将Frustum压缩成Cuboid虽然只是压缩，但其中的计算过程比前面的都要复杂很多。 拆分其变换过程，如下，近平面于原平面形成一个相似三角形得到变换后的x轴以及y轴值：y’ = y * n/z; x’ = x * n/z; 而z轴暂时还不知道,得到如下变换后的坐标 由第1部分求得坐标可以推算出变换矩阵的部分值：M * (x,y,z,1) = (nx,ny,unknown,z), M如下： 已知条件：(1)所有近平面的点压缩后都保持不变(2)远平面的点压缩z值不变分别将其中的坐标带入矩阵计算：(1) 近平面点带入： M * (x,y,n,1) = (nx,ny,n * n,n)，注释：变换后的z = n * n 于x,y不存在任何关系，因此可以得到(0,0,A,B)(2) 远平面点带入： M * (x,y,f,1) = (unknown,unknown,f*f,f)最终得到两条方程式：(1)An + B = n * n(2)Af + B = f * f求解得：A = n + f； B = -n * f 最终其压缩矩阵如下图： Viewport Tranform(视口变换)原理：先定义好平面的height和width，即平面的像素比，屏幕坐标空间中左下角为(0,0)，再经过MVP变换后，当前图片所在空间为[x:[-1,1],y:[-1,1]]，需要将其大小变大，再平移至左下角到(0,0)点 光栅化阶段经过视口变换后，所有图形信息都存在屏幕空间，这时需要考虑怎么将其显示出来，这个显示的过程就是光栅化。 三角形遍历为什么使用的是三角形？ 三角形是最基本的图形， 一个三角形一定在一个平面上 可以很方便计算一个点在三角形的内外，使用叉乘 三角形遍历原理：遍历每个可能的像素的中心点是否在三角形内部但是通过这种方式遍历后，就会出现一个问题：走样(Aliasing)，或称为锯齿 反走样(抗锯齿) (Anti-aliasing)走样是怎么形成的？根本原因是采样的频率跟不上变化的频率 频域(Frequency Domain) 正弦/余弦频谱 傅里叶变换(Fourier Transform)将非常多按照公式计算的频谱相加最终会越来越趋向于方形的频谱(1) 通过傅里叶变换可以将图片从 空间域转换到频域(2) 通过逆傅里叶变换可以将图片从 频域转换到空间域 频谱采样的一种特殊情况，如下图：对于两个不同频谱采样结果相同造成了走样 滤波器(Filter)滤波器是针对空间域(Spatial Domain)中的图片进行卷积计算，但滤波器实际可以表示为对频域的操作。如下图傅里叶变换结果：低频越趋向于白色，高频趋向于黑色，低频普遍存在于图片中心部分。 低通滤波器：低频通过，实际对频域进行低通滤波，可以达到模糊图片的效果实际原理就是将频域图片的高频部分全部过滤，只有低频通过。 高通滤波器：高频通过，可以达到描边的效果（高频表示图片中变化差异很大的部分,相当于是描边） 卷积如以3x3的box对图片进行卷积，每个像素的颜色至就相当于当前像素为中心周围9个像素点按照卷积核的比例相加。在空间域对图片进行卷积，相当于在频域中的两个图片的乘积，如下图验证了这一点： 实现反走样：在三角形遍历之前先进行模糊操作，再进行三角形遍历，每个像素保持模糊后的颜色值，模糊就是使用低通滤波对像素进行卷积操作 深度缓存(Z/Depth Buffer)在三角形遍历后，我们知道了所有需要渲染的三角形，现在需要考虑将它们画出来，这时需要考虑绘制三角形的先后顺序，正确的先后顺序以保证最终显示的图形是我们想要的图形，最初有一种算法油画家算法，从远到近依次绘制所有三角形，但是对于多个三角形互相穿插的问题无法得到解决，ZBuffer可以很好的规避渲染顺序问题，通过对每一个像素维护一个深度值，绘制三角形不需要考虑顺序，每次绘制时只考虑深度值是否小于缓存值，小于则绘制，大于则剔除，绘制时间复杂度只有O(N)。 着色(Shading)渲染管线(Rendering pipeline)实时渲染管线的整体顺序：应用阶段-&gt;几何阶段-&gt;光栅化阶段 应用阶段： 几何阶段： 光栅化阶段： 标准着色(Lambert + Ambient + Specular) 漫反射(Lambert) 高光反射(Specular)Phone和Blinn-Phone 环境光(Ambient) 重心坐标(Barycentric Coordinates)通过三角形的重心坐标可以做到由三角形的三个顶点插值到重心坐标处的值，这个值包括可以包括任何信息(法线，颜色等)同时可以扩展：三角形内的顶点 Q = aP1 + bP2 + c*P3， 且 a+b+c = 1 &amp;&amp; a&gt;0 &amp;&amp; b&gt;0 &amp;&amp; c&gt;0 纹理映射(Texture Mapping)通过使用一张纹理图片定义不同像素处的不同值。这些值可以用来做：颜色，高度图，噪声图等等。将纹理贴图的长宽定义成u,v，范围[0,1]区间方便计算。 纹理贴图首先定义：一个像素在纹理中的名字叫做纹素(texel)，且一个像素内只存在同样的颜色信息下面介绍纹理贴图在使用过程中遇到的问题以及如何优化 当纹理图片太小 问题描述：如果需要渲染一个在屏幕上为200x200像素的网格而纹理只有100x100像素大小，这时为了达到完整的渲染会将纹理图片拉伸至200x200像素大小，拉伸后一个纹素相当于原来的4倍，然后网格通过uv读取，可以发现网格中的采样4个像素才相当于原先纹理的1个像素，这导致这些像素使用了相同的颜色信息，因此会出现模糊。 解决方法：双线性插值(Bilinear Interpolation)，双立方插值(Bicubic Interpolation) 双线性插值(Bilinear Interpolation)核心思路：当采样一个点时，拿到其周围4个最近的采样坐标，拿到这4个采样像素的值，插值出当前采样点的颜色信息。 双立方插值(Bicubic Interpolation)思路于双线性插值一样，只是采样点从4个增加到16个 当纹理图片太大 问题描述：如果需要渲染一个三角形实际可能很大，但其在屏幕上占据像素为1x1px,而其纹理图片大小100x100px，进行普通采样只会获得其采样点对于的颜色，并不是我们想要的颜色，如下图可以看出摩尔纹以及锯齿(走样)问题。 在之前学习过走样形成的根本原因：采样频率低于变化频率，遇到这个问题当然可以通过超采样来避免，将1像素进行512个采样点采样，确实可以避免走样问题，采样结果如下，但是其消耗太大了： 为什么普通点采样会出现上面的走样问题：越远的三角面在屏幕中占据的像素越少，而对于一个像素在纹理中占的范围就越大这时通过点采样出来的信息一定是不满足的，采样范围的平均值反而更适合，那么怎么快速采样范围的平均值，一个新的概念使用MipMap。 MipMap MipMap允许做快速，近似的正方形的范围查询。 MipMap是预先生成的，从原图比例开始，每次长宽变小为原图的一半，直到像素为1x1px。 MipMap只多使用了原图的1/3的内存空间。 计算当前在MipMap中采样第几层的纹理数据 三线性插值(Trilinear Interpolation)在MipMap中如果得到层级在2.5层怎么正确获取颜色值？同时拿到第2，3层，分别进行双线性插值，将其结果再进行一次插值。 MipMap处理后的效果图，出现了一个新的问题，远处过度模糊(OverBlur) 各向异性过滤(Anisotropic Filtering)使用更多的内存保存更多分辨率的图片，MipMap只保存正方形大小，而各项异性过滤需要额外保存长方形的图片。效果图： 环境贴图(Environment Map)/立方体贴图(Cube Map) 环境贴图：将环境反射的颜色信息存储在一个球上 立方体贴图：将环境反射信息存储在立方体上 法线贴图/凹凸贴图(Bump Mapping) 作用于顶点法线上，使得表面看起来有一定凹凸感 作用原理：相当于将法线贴图的信息当作顶点的偏移值，就会造成一些顶点凹，一些凸，但是并不实际作用于顶点，只是用偏移后的顶点坐标再进行法线计算，就可以得到新的法线，将这个法线用于光照即得到新的视觉效果。 二维法线计算过程：如计算n，取贴图当前坐标值以及偏移1的值的差求出dp = c * [h(p+1) - h(p)],(注：h(p)，凹凸贴图定义的是切线，通过贴图拿到值)，逆时针旋转90度求得n，如图 三维法线计算过程： 注：其h(u)，也是通过贴图直接拿到值(1) dp/du = c1 * [h(u+1) - h(u)](2) dp/dv = c2 * [h(v+1) - h(v)](3) 最终：n = (-dp/du, -dp/dv, 1) 位移法线：将贴图影响的偏移应用到顶点上，其效果更好 阴影 (Shadow)几何(Geometry)什么是几何？几何就是拥有某种空间结构的形状。 几何模型曲线 (Curves)贝塞尔曲线 (Bézier Curves)曲面 (Surfaces)贝塞尔曲线 (Bézier Surfaces)模型 (Mesh) 一个Mesh由很多 一个模型文件.obj中存储的数据内容包括：顶点，顶点切线，顶点法线，三角面(一组顶点链接的顺序并组成面) 模型细分(Mesh subdivision)目的：达到更精细的显示效果 Loop Subdivision (只适用于三角面细分)Catmull-Clark Subdivision (通常模型的细分,将多边形统一细分成四边形)模型简化(Mesh simplification)目的：减少渲染计算压力，避免不必要的计算 模型规则化(Mesh regularization)目的：提高模型质量 光线追踪(Ray Tracing)参考GAMES101-现代计算机图形学入门-闫令琪","categories":[{"name":"Graphics","slug":"Graphics","permalink":"https://skierhou.github.io/categories/Graphics/"}],"tags":[{"name":"Graphics","slug":"Graphics","permalink":"https://skierhou.github.io/tags/Graphics/"}]},{"title":"3D数学基础：图形与游戏开发","slug":"Graphics/3D Math Primer for Graphics and Game 2nd","date":"2021-03-12T06:30:01.000Z","updated":"2021-04-08T08:04:29.673Z","comments":true,"path":"2021/03/12/Graphics/3D Math Primer for Graphics and Game 2nd/","link":"","permalink":"https://skierhou.github.io/2021/03/12/Graphics/3D%20Math%20Primer%20for%20Graphics%20and%20Game%202nd/","excerpt":"","text":"向量向量点乘公式：a*b = |a||b|cosθ几何意义：(1) 判断前后(2) 投影用矩阵表示： 向量叉乘公式：|a×b| = |a||b|sinθ几何意义：(1) 判断左右(2) 计算垂直a,b所形成平面的向量，该向量的朝向由左手定则(左手坐标系)，右手定则(右手坐标系)决定用矩阵表示： 矩阵 矩阵转置(M(T))：通俗解释,行变列，列变行 矩阵乘法 矩阵变换过程(1)v=(x,y,z) 拆解成v=xp+yq+zr，p,q,r为一个坐标系的+x轴，+y轴，+z轴的单位向量(2)其(p,q,r)可以拆分为一个33矩阵即(3)矩阵变换相当于 变换矩阵列向量=新的向量 旋转矩阵(1) 2D旋转矩阵 (2) 3D绕正坐标轴旋转与2D同样(3) 3D绕任意轴旋转 缩放矩阵(1) 三轴的缩放因子kx,ky,kz 乘对应的p，q，r即是缩放矩阵 (2) 沿任意轴缩放矩阵 (3) 关于沿任意轴缩放矩阵因子k的特殊解释： k=-1：镜像，n相当于平面法向量 k=0：投影，n相当于平面法向量 k&gt;0：普通缩放 切变 (扭曲变换)一个/多个轴的坐标被另外一个轴以及一个/多个系数影响，2D切变如：将y乘因子s再加到x轴上，x’ = x + y*s。可以解释为，切变y轴，因子s，x轴受y轴切变影响 行列式 (矩阵M的行列式表示为：|M|) 余子式 (M(ij)表示从M矩阵中去掉第 i 行以及第 j 列后剩余的矩阵) 代数余子式 行列式性质(1).|A*B|=|A||B|(2).|M(T)|=|M| 注：M(T)为M的转置(3).矩阵任意行或列都为零，则行列式为零(4).交换矩阵的任意两行或两列，行列式变负(5).任意行或列的非零积加到另一行或列上，行列式值不变(6).行列式的值=2D中的面积，3D中的体积 矩阵的逆 M(-1)矩阵的逆 公式： “标准伴随矩阵” / 行列式 = 矩阵的逆 正交矩阵 (通常表示为Q)M * M(T) = I，M * M(-1) = I，M(T) = M(-1)(1)M(T)，M(-1)也为正交矩阵(2)|M| = +1或-1(3)M(T)各行为单位向量且两两相交几何意义：在已知该矩阵为正交矩阵的前提下，求矩阵的逆只需要求矩阵的转置而不用复杂计算。在坐标转换中旋转矩阵都是正交矩阵 4X4齐次矩阵平移是一个特殊的变换矩阵，在3X3矩阵中无法表示，因此添加了一个唯独存放平移信息，其中W分量为1表示向量，而W分量为0表示点 欧拉角 比较常见的表达旋转的方式，用三个旋转角度表示当前的旋转值，分别对应：绕x，y，z轴旋转度数。 优点：表达简单易懂，任意3个数表示欧拉角都是有效的 缺点：插值困难，如+190°与-170°实际表现是一样的但是普通插值会造成360°以上的旋转，旋转中某种特殊情况会出现万向锁问题 四元数 Q = [w v] = [w x y z] 单位四元数：Q = [1 0] 带入角度以及旋转轴： 四元数的模 四元数的共轭：q(*) ，向量变负 四元数的逆：q(-1) * q = [1 0] （单位四元数），由共轭除以模获得 四元数的乘法（叉乘）：（满足乘法结合律，不满足交换律） 使用四元数旋转标准3D坐标（x,y,z）转成p=[0 (x,y,z)]，q为旋转矩阵：[cos(θ/2) n*sin(θ/2)]再通过以下公式由右向左旋转： 由左向右旋转： 四元数的差：计算四元数’a’旋转到’b’的角位移，用’d’表示 a*d = b ，同时左乘一个a的逆（四元数不支持除法） 四元数点乘 几何意义：a·b的绝对值越大，说明a与b角位移越相似 四元数求幂：（比较常用）一个四元数q(1/3) 表示1/3的q的角位移; q(2)：两倍q的角位移 几何图元 自由度概念：自由度是决定一个图元可用的最少参数。 如：球：半径，矩形：长，宽，高 边界球检测相交 AABB包围盒检测相交：矩形的边于世界坐标系平行，满足相交条件Xmin &lt;= X &lt;= Xmax , Ymin &lt;= Y &lt;= Ymax , Zmin &lt;= Z &lt;= Zmax关于AABB包围盒的变换，当物体变换时，并不能直接设置AABB盒子(旋转等，盒子大小会变化)，而需要重新计算 点到平面的距离计算：取平面任意一点，得向量a以及于平面的夹角θ，sinθ*|a|即最短距离 三角形面积计算：1.bh/2 ，2.海伦公式(在不知道高的情况下)： 三角形重心，内心，外心计算， 重心：三角形平衡点，内心：到三条边距离相等，外心：到三个顶点距离相等 证明点在三角形内部，只需要用三角形的三个点于点P的向量分别于其三条边的向量做叉乘，求得点P在边的左侧或右侧，但三条边都在内部则点P在三角形内部 几何检测 (重点 重复查看)三角网格 (没看懂)图形数学可见性检测","categories":[{"name":"Graphics","slug":"Graphics","permalink":"https://skierhou.github.io/categories/Graphics/"}],"tags":[{"name":"Math","slug":"Math","permalink":"https://skierhou.github.io/tags/Math/"},{"name":"Graphics","slug":"Graphics","permalink":"https://skierhou.github.io/tags/Graphics/"}]},{"title":"Addressable 深度理解与使用","slug":"Unity/Resource/Addressable","date":"2021-03-05T06:30:01.000Z","updated":"2021-03-10T04:48:10.425Z","comments":true,"path":"2021/03/05/Unity/Resource/Addressable/","link":"","permalink":"https://skierhou.github.io/2021/03/05/Unity/Resource/Addressable/","excerpt":"","text":"Addressable是什么是Unity官方出的资源管理器，Addressable即可寻址的资源系统Addressable的优点： 通过一个key，可以直接获取资源，不需要在意资源的实际位置 有完整的可视化界面，不需要写大量资源管理代码即可管理资源 方便自定义打包，自带增量更新等 Addressable的使用心得 操作界面入口 初次打开需要创建Setting之后会看到Assets目录下的文件结构，先做简单介绍后面在工具使用时会依次讲到所有资源文件使用方式 路径 注释 AddressableAssetsData 根目录，AddressableAssetSettings是整个Addressable设置 AddressableAssetsData/AssetGroups 资源管理组，管理多个Schema处理该组内资源的读取/加载/保存等逻辑 AddressableAssetsData/AssetGroups/Schemas 处理模式，处理数据的实际逻辑类，继承自AddressableAssetGroupSchema，默认提供了三个Schema，分别对应两个AssetGroups：Built In Data以及Default Local Group AddressableAssetsData/AssetGroupTemplates 这个路径下只是一个模板，在创建Group时会复制一份这个模板 AddressableAssetsData/DataBuilders 在不同构建模式下，在游戏运行中的数据提供者，可选择项有InstanceProvider以及SceneProvider AddressableAssetsData/Windows 这个路径是打包才会自动生成的本地对应文件，记录上一次打包信息，可以用于增量更新，通过保存的文件判断哪些文件需要更新 Groups界面，管理所有Groups，即资源组，默认资源组存在两个:Build In Data，Default Local Group。 Group 注释 Build In Data 点击Build In Data，对应Assets/AddressableAssetsData/AssetGroups/Build In Data.asset，只有两个设置：包含Resources路径下资源，BuildSetting设置的场景，即这部分资源会打进游戏包中，不进行资源加载，这个资源组官方已经设置好了，不需要做任何其他设置。 Build In Data.asset目前没有方式主动创建，不要误删即可（不然只能重新创建数据了）。 Default Local Group 对应Assets/AddressableAssetsData/AssetGroups/Default Local Group.asset，其中包含两个Schema：BundledAssetGroupSchema,ContentUpdateGroupSchema。 ContentUpdateSchema：只有一个设置，设置为全量更新或者增量更新，全量：更新即替换，增量：不替换原资源情况下多打一个资源包，BundledAssetGroupSchema：设置资源打包/加载路径，以及Bundle模式：crc缓存，bundle名，以什么方式分组等，通常使用默认即可 Groups界面操作资源可以通过拖拽文件夹，拖拽单个文件，或再Inspector面板直接勾选Addressable 按钮 注释 Profile 路径配置，远程/本地的加载/构建路径，不管构建再哪个路径底下，加载Key都保持不变，这也是Addressable基本思想所在 Tools 工具，可以快捷打开所有界面，关于’Check For Content Update’按钮是用于增量更新的，当group设置为增量模式，且相比较上一次存在变换，点击这个按钮增量打包，会产生一个新的资源组管理增量资源，增量打包后原资源不会删除，但对应key下的hash指向的资源会变成新包资源。 Play Mode Script 游戏中使用的资源加载模式：1.fastest：AssetsDataset加载，2.advanced：模拟ab包加载，3.requires built groups：实际ab包加载。选择每种模式后对应AddressableAssetsData/DataBuilders的构建设置也会修改，对应1.BuildScriptFastMode,2.BuildScriptPackedPlayMode,3.BuildScriptVirtualMode，其中多的一个BuildScriptPackedMode为实现构建资源时的默认构建模式 Build New Build 下的按钮对应AddressableAssetsData/DataBuilders/BuildScriptPackedMode.asset，第二个按钮即增量更新按钮与Tools中的Content Update配合使用，Clean按钮即清除已构建的资源 Profile 界面：管理Profile，设置打包，加载等路径 AddressableAssetSettings设置：通常使用默认即可，对应按钮名称标记很明显了，不进行详细介绍 EventViewer界面：查看运行时资源使用情况，启动时需设置AddressableAssetSettings中的Send Profiler Event Analyze界面：用于分析资源的依赖关系，Fixable Rule：可修复的规则，分析器自动修复，UnFixable Rule：不可修复的规则，会列出来需要手动修复 Hosting界面：创建远程或者本地的服务器，方便测试，默认使用HTTP Service，查看HttpHostingService.cs代码可自定义服务器模式 Addressable的使用说明加载资源Addressable中加载任何资源都需要异步加载，不过可以使用Task多线程方式加载，使用非常方便。 1234567891011121314151617181920212223242526272829303132333435public class Test : MonoBehaviour&#123; [SerializeField] private string _entryName &#x3D; &quot;Assets&#x2F;Prefabs&#x2F;Cube.prefab&quot;; public AssetReference ar; private void Start() &#123; &#x2F;&#x2F; 使用Task异步加载 StartAsync(); &#x2F;&#x2F; 使用AssetReference引用直接加载 ar.LoadAssetAsync&lt;GameObject&gt;().Completed +&#x3D; LoadFinish; ar.InstantiateAsync(Vector3.one, Quaternion.identity); &#125; private void LoadFinish(AsyncOperationHandle&lt;GameObject&gt; loadHandle) &#123; if (loadHandle.IsDone &amp;&amp; loadHandle.Status &#x3D;&#x3D; AsyncOperationStatus.Succeeded) &#123; &#x2F;&#x2F;这里Result是预制体 Debug.Log(loadHandle.Result); Addressables.Release(loadHandle); &#125; &#125; private async Task StartAsync() &#123; var instance &#x3D; await Addressables.InstantiateAsync(_entryName).Task; Addressables.ReleaseInstance(instance); instance &#x3D; await Addressables.InstantiateAsync(_entryName).Task; Addressables.ReleaseInstance(instance); &#125;&#125; 关于更新使用Addressables提供的接口即可完成更新检查，以及下载，详细请阅读代码。 1234567891011121314151617181920212223242526272829303132333435363738394041424344private async void UpdateAndDownLoad()&#123; &#x2F;&#x2F; 1. 检查更新 AsyncOperationHandle&lt;List&lt;string&gt;&gt; updateHandle &#x3D; Addressables.CheckForCatalogUpdates(false); await updateHandle.Task; if (updateHandle.Status &#x3D;&#x3D; AsyncOperationStatus.Succeeded) &#123; updateList &#x3D; updateHandle.Result; &#125; &#x2F;&#x2F; 2.开始更新 AsyncOperationHandle&lt;List&lt;IResourceLocator&gt;&gt; updateHandler &#x3D; Addressables.UpdateCatalogs(updateList, false); await updateHandler.Task; &#x2F;&#x2F; 3.获取更新资源的key List&lt;string&gt; updateKeys &#x3D; new List&lt;string&gt;(); foreach (IResourceLocator locator in updateHandler.Result) &#123; if (locator is ResourceLocationMap map) &#123; foreach (var item in map.Locations) &#123; if (item.Value.Count &#x3D;&#x3D; 0) continue; string key &#x3D; item.Key.ToString(); if (int.TryParse(key, out int resKey)) continue; if (!updateKeys.Contains(key)) updateKeys.Add(key); &#125; &#125; &#125; &#x2F;&#x2F; 4.判断下载资源大小 AsyncOperationHandle&lt;long&gt; downLoadSize &#x3D; Addressables.GetDownloadSizeAsync(updateKeys); await downLoadSize.Task; &#x2F;&#x2F; 5.下载 AsyncOperationHandle downLoad &#x3D; Addressables.DownloadDependenciesAsync(updateKeys, MergeMode.None); await downLoad.Task; &#x2F;&#x2F; 6.清除 Addressables.Release(updateHandler); Addressables.Release(downLoad);&#125; Addressable的扩展自动化打包 在实际项目中资源打包通常不会人工手动设置，而是通过一些模式自动化打包，Addressable虽然提供了非常完善的功能界面，但是打包自动化还是需要用户自己扩展。以下是我个人理解的打包策略，与上篇AssetBundle文章的一样的策略，一个文件夹下所有的资源都按当前文件夹名称设置AB包一个文件一个AB包，子文件递归设置。 Groups界面可以直接拖拽文件夹进去，但是打包设置中只有三个选项：1.一组打成一个包，2.文件夹打成一个包(一次拖进去的文件夹子目录也包括进去)，3.按标签打包。我这里使用的是按标签打包，相同标签一个包。 扩展代码请查看末尾的项目。 场景加载以及游戏物体实例化扩展 Addressable默认有提供InstanceProvider以及SceneProvider，但是InstanceProvider中并没有使用到对象池，且在使用Addressables.InstantiateAsync()多次后，同样的资源引用会存在多个，可以通过EventViewer中看到资源占用的堆内存空间，通过继承IInstanceProvider以及ISceneProvider自己实现加载完实际资源后的实例化对象即可。其实就是将对象池写入IInstanceProvider，查看末尾的项目代码其中有InstanceProviderHelper.cs实现。 项目路径 https://github.com/Skierhou/ResourceManager","categories":[{"name":"Unity","slug":"Unity","permalink":"https://skierhou.github.io/categories/Unity/"},{"name":"Resource","slug":"Unity/Resource","permalink":"https://skierhou.github.io/categories/Unity/Resource/"},{"name":"Addressable","slug":"Unity/Resource/Addressable","permalink":"https://skierhou.github.io/categories/Unity/Resource/Addressable/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"https://skierhou.github.io/tags/Unity/"},{"name":"Addressable","slug":"Addressable","permalink":"https://skierhou.github.io/tags/Addressable/"}]},{"title":"AssetBundle 注意事项以及使用","slug":"Unity/Resource/AssetBundle","date":"2021-03-05T06:30:01.000Z","updated":"2021-03-10T02:11:57.106Z","comments":true,"path":"2021/03/05/Unity/Resource/AssetBundle/","link":"","permalink":"https://skierhou.github.io/2021/03/05/Unity/Resource/AssetBundle/","excerpt":"","text":"AssetBundle是什么AssetBundle是Unity的资源管理包，用于资源加载卸载。AssetBundle分为数据头和数据段： 数据头：存储一些设置，如压缩类型，索引，manifest等 数据段：存储序列化后Asset数据 AssetBundle的优点： 自带压缩算法 方便管理，适合增量更新 可随意加载卸载Asset 内部包含Asset的引用关系，不需要怕引用丢失 AssetBundle的压缩压缩格式分为：LZ4，LZMA LZMA打包成字节流，包体会比LZ4小 LZMA打包运行时占用运行内存空间会比LZ4大很多,在使用是LZMA包在初始化时先解压再压缩成LZ4使用，个人理解实际情况：LZMA解压完的数据会先存在内存中，再压缩成LZ4，但是使用时又需要将LZ4解压，感觉上是极度没必要的。 通常情况下使用LZ4打包，不需要考虑太多内存空间的事，只是包体会稍微大一些 AssetBundle的读取有两种方式LoadFromMemory，LoadFromFile LoadFromMemory：需要反复读取byte数组，会有额外的内存消耗 LoadFromFile: 直接从硬盘文件中读取，注意：LoadFromFile在Editor模式下会直接读取整个AssetBundle，而运行时只会读取AssetBundle的头数据，在Editor下性能分析需要注意这一项 AssetBundle的卸载AssetBundle.UnLoad(bool unloadAllLoadedObject) 卸载时需要注意，当使用UnLoad(false)，且有实际使用资源时，该资源并不会卸载会缓存一份，再下一次加载出AssetBundle时，会复制另一份资源，导致同样的资源内存中存在两份。 卸载时使用UnLoad(true),会卸载所有加载资源，使用这类资源的将丢失，但是下一次加载出AssetBundle时，内存中只会有一份资源 AssetBundle的依赖关系编辑器下由AssetDatabase 和 AssetImporter管理，AssetDatabase管理依赖，AssetImporter为AssetBundle数据 通过AssetDatabase.GetDependencies(path) 来获取该Asset的依赖文件 通过AssetImporter可以修改Asset的AssetBundle设置 实际打包时，会将Asset的依赖关系打进manifest文件，但是加载一个AssetBundle时Unity并不会将其依赖AssetBundle一同加载出来，需要自己主动进行管理 AssetBundle在项目中使用通常在实际项目中使用并不会去手动一一设置AssetBundle名称再进行打包，而会根据项目需求自定义打包模式，下面由我介绍一下个人感觉非常实用的打包策略。 将一个文件夹路径下所有的文件统一自动打成AssetBundle包，所有Asset按文件夹名称设置ABName并递归所有子文件夹，使用这种做法只需要管理好项目资源的目录结构就可以很好管理AssetBundle了 在打包的同时将保存所有Asset的数据：crc, path, assetName, assetBundleName, dependceAssetBundles。保存成二进制一同打进config包中,游戏启动先加载config，在加载一个资源时再加载对应包以及依赖包即可12345678910111213141516171819[System.Serializable]public class AssetBundleConfig&#123; &#x2F;&#x2F; 资源路径转crc public uint crc; &#x2F;&#x2F; 资源路径 public string path; &#x2F;&#x2F; 资源包名 public string assetBundleName; &#x2F;&#x2F; 资源名：从资源包中加载的名称 public string assetName; &#x2F;&#x2F; 依赖包 public List&lt;string&gt; dependceAssetBundles;&#125;[System.Serializable]public class AssetBundleContainer&#123; public List&lt;AssetBundleConfig&gt; configList;&#125; 实现两个管理器AssetBundleManager，以及ResourceManager，使用时ResourceManager按路径加载资源，ResourceManager从AssetBundleManager拿到AssetBundle包12345678910111213141516171819202122232425262728293031public interface IAssetBundleManager&#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 同步加载AB包 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; AssetBundle LoadAssetBundle(string assetBundleName); &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 异步加载AB包 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; void LoadAssetBundleAsync(string assetBundleName, Action&lt;AssetBundle&gt; callback); &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 卸载AB包 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; void UnLoadAssetBundle(string assetBundleName);&#125;public interface IResourceManager&#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 同步加载资源 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; T LoadAsset&lt;T&gt;(string path) where T : UnityEngine.Object; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 异步加载资源 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; void LoadAssetAsync(string path, Action&lt;UnityEngine.Object, object&gt; onLoaded, int priority &#x3D; 0, object userData &#x3D; null); &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 卸载资源 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; void UnLoadAsset(string path, bool isDestroy &#x3D; false);&#125; 项目路径 https://github.com/Skierhou/ResourceManager","categories":[{"name":"Unity","slug":"Unity","permalink":"https://skierhou.github.io/categories/Unity/"},{"name":"Resource","slug":"Unity/Resource","permalink":"https://skierhou.github.io/categories/Unity/Resource/"},{"name":"AssetBundle","slug":"Unity/Resource/AssetBundle","permalink":"https://skierhou.github.io/categories/Unity/Resource/AssetBundle/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"https://skierhou.github.io/tags/Unity/"},{"name":"AssetBundle","slug":"AssetBundle","permalink":"https://skierhou.github.io/tags/AssetBundle/"}]},{"title":"Markdown基础语法","slug":"Base/markdown","date":"2021-03-02T06:30:01.000Z","updated":"2021-03-10T04:40:45.030Z","comments":true,"path":"2021/03/02/Base/markdown/","link":"","permalink":"https://skierhou.github.io/2021/03/02/Base/markdown/","excerpt":"","text":"初于方便写文章考虑，整理一下markdown语法规则 转载链接 标题123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题字体1234**这是加粗的文字***这是倾斜的文字*&#96;***这是斜体加粗的文字***~~这是加删除线的文字~~ 这是加粗的文字这是倾斜的文字`这是斜体加粗的文字这是加删除线的文字 引用123&gt; 引用&gt;&gt; 引用&gt;&gt;&gt; 引用 引用 引用 引用 分割线1234-------******** 图片12格式：![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)参考：![default](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;butterfly-extsrc@1&#x2F;img&#x2F;default.jpg &quot;标题&quot;) 超链接12格式：[超链接名](超链接地址 &quot;超链接title&quot;)参考：[简书](http:&#x2F;&#x2F;jianshu.com) 简书 列表12无序： * - +有序： 1. 2. 3. 无序 无序 无序 有序 有序 有序 表格1234567891011表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略 表头 表头 表头 内容 内容 内容 内容 内容 内容 代码块123(&#96;&#96;&#96;) 代码块...(&#96;&#96;&#96;) 流程图1234567891011&#96;&#96;&#96;sequenceTitle:时序图示例客户端-&gt;服务端: 我想找你拿下数据 SYN服务端--&gt;客户端: 我收到你的请求啦 ACK+SYN客户端-&gt;&gt;服务端: 我收到你的确认啦，我们开始通信吧 ACKNote right of 服务端: 我是一个服务端Note left of 客户端: 我是一个客户端Note over 服务端,客户端: TCP 三次握手participant 观察者这里也不支持流程图","categories":[{"name":"通用","slug":"通用","permalink":"https://skierhou.github.io/categories/%E9%80%9A%E7%94%A8/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://skierhou.github.io/tags/Markdown/"}]},{"title":"2021年规划","slug":"Plan/plan2021","date":"2021-03-01T06:30:01.000Z","updated":"2021-04-09T05:00:32.132Z","comments":true,"path":"2021/03/01/Plan/plan2021/","link":"","permalink":"https://skierhou.github.io/2021/03/01/Plan/plan2021/","excerpt":"","text":"每年需持续整理个人任务，个人任务可以规划为年度任务，月任务，详细再到周任务记录个人任务完成情况，如未完成，需写下原因以检讨在工作空闲时间，假期，周末等时期完成的任务 年度任务规划 任务描述 完成情况(%) 注释 客户端方向 Dots技术栈深度学习，需要能做到运用到项目中去，使用Dots制作鱼群，鸟群等效果Demo 10% 目前已掌握基础使用 EGameTang框架深度学习，掌握EGameTang网络架构原理并制作联机RPGDemo 10% 目前已掌握基础使用 GameFramework框架深度学习，学习其代码规范，底层原理，架构思想 50% 目前以运用于项目中 Ability技能系统搭建完成，并完成多个模式的Demo 50% 技能系统已搭建，准备Demo即可 AI行为系统的深度学习，主要参考UE4 AI系统 10% 掌握基本使用 AssetBundle,Addressable的深度学习 80% TA方向||Game101 计算机图形学入门|50%|看完教程后总结OpenGL，看完书籍红皮书，蓝皮书|10%|3D数学基础，总结提炼|50%|UnityShader，光照GI，渲染管线|20%|Unity实现天气系统，下雨打雷，下雪，风|0%|Unity草地|50%|ShaderGraph使用|0%|PS，基本使用|0%|3DMax，基本使用|0%|粒子特效制作|0%|Real-Time Rendering 3rd书籍详细学习|0%|在3D数学UnityShader编程OpenGL都完成后学习GPU Gems等系列书籍|0%|放到将TA基础都看完了之后进行学习 整体技术方向||完成一款游戏Demo,未来考虑长期制作并发布的Demo|0%| 月任务规划 时间(月) 任务描述 完成情况(%) 注释 1 无 无 3月启动 2 无 无 3月启动 3 1.GF框架深度学习，代码解剖；2.PS,3DMax,粒子特效制作；3.AssetBundle,Addressable的深度学习 80% 4 1.OpenGL红皮书，蓝皮书；2.EGameTang框架深度学习，代码解剖；3.整理个人项目结构，第一个项目单机可热更 4. Game101 计算机图形学入门 5.PS,3DMax,粒子特效制作 80% 无 5 无 无 无 6 无 无 无 7 无 无 无 8 无 无 无 9 无 无 无 10 无 无 无 11 无 无 无 12 无 无 无","categories":[{"name":"年度规划","slug":"年度规划","permalink":"https://skierhou.github.io/categories/%E5%B9%B4%E5%BA%A6%E8%A7%84%E5%88%92/"}],"tags":[{"name":"Plan","slug":"Plan","permalink":"https://skierhou.github.io/tags/Plan/"}]},{"title":"GameFramework 底层解析","slug":"Unity/GameFramework/GF1","date":"2021-03-01T06:30:01.000Z","updated":"2021-03-22T02:34:23.426Z","comments":true,"path":"2021/03/01/Unity/GameFramework/GF1/","link":"","permalink":"https://skierhou.github.io/2021/03/01/Unity/GameFramework/GF1/","excerpt":"","text":"对GF的源码解析，学习设计思路，学习代码规范 GF官网 GF-API看了GF的源码，感觉自己之前写的代码都是一堆垃圾!!!源码阅读建议：与StarForce项目一同阅读 Base层数据处理器，序列化工具，Log，事件池，引用池，任务代理池，其他扩展：Action，Func，变量封装(用于自定义数据结构)，自定义链表 DataProvider 数据处理器主要细节只需要看IDataProvider，IDataProviderHelper的实现上IDataProvider，IDataProviderHelper主要实现2个接口：ReadData，ParseData IDataProvider 从ResourceManager中读取资源，为数据提供者 IDataProviderHelper负责对具体数据的解析，为数据提供者帮助接口，用户使用上只需要实现帮助类即可对于IDataProviderHelper可能会引起误区，这里的ReadData是在IDataProvider读取资源成功时调用，这时已经拿到了需要的资源，可以直接使用或者再主动调用ParseData解析数据再使用。 执行顺序如：ConfigManager.ReadData()-&gt;IDataProvider.ReadData()-&gt;读取成功后-&gt;IDataProviderHelper.ReadData()，这时主动调用ConfigManager.ParseData()-&gt;IDataProvider.ParseData()-&gt;IDataProviderHelper.ParseData() 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899IDataProvider&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 数据提供者接口。&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;&#x2F;&#x2F;&#x2F; &lt;typeparam name&#x3D;&quot;T&quot;&gt;数据提供者的持有者的类型。&lt;&#x2F;typeparam&gt;public interface IDataProvider&lt;T&gt;&#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 读取数据成功事件。 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; event EventHandler&lt;ReadDataSuccessEventArgs&gt; ReadDataSuccess; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 读取数据失败事件。 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; event EventHandler&lt;ReadDataFailureEventArgs&gt; ReadDataFailure; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 读取数据更新事件。 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; event EventHandler&lt;ReadDataUpdateEventArgs&gt; ReadDataUpdate; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 读取数据时加载依赖资源事件。 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; event EventHandler&lt;ReadDataDependencyAssetEventArgs&gt; ReadDataDependencyAsset; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 读取数据。 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAssetName&quot;&gt;内容资源名称。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;priority&quot;&gt;加载数据资源的优先级。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt; void ReadData(string dataAssetName, int priority, object userData); &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 解析内容。 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataBytes&quot;&gt;要解析的内容二进制流。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;startIndex&quot;&gt;内容二进制流的起始位置。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;length&quot;&gt;内容二进制流的长度。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否解析内容成功。&lt;&#x2F;returns&gt; bool ParseData(byte[] dataBytes, int startIndex, int length, object userData);&#125;&#x2F;&#x2F;&#x2F; &lt;summary&gt;&#x2F;&#x2F;&#x2F; 数据提供者辅助器接口。&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;public interface IDataProviderHelper&lt;T&gt;&#123; &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 读取数据。 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAssetName&quot;&gt;内容资源名称。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAsset&quot;&gt;内容资源。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否读取数据成功。&lt;&#x2F;returns&gt; bool ReadData(T dataProviderOwner, string dataAssetName, object dataAsset, object userData); &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 读取数据。 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAssetName&quot;&gt;内容资源名称。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataBytes&quot;&gt;内容二进制流。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;startIndex&quot;&gt;内容二进制流的起始位置。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;length&quot;&gt;内容二进制流的长度。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否读取数据成功。&lt;&#x2F;returns&gt; bool ReadData(T dataProviderOwner, string dataAssetName, byte[] dataBytes, int startIndex, int length, object userData); &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 解析内容。 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataString&quot;&gt;要解析的内容字符串。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否解析内容成功。&lt;&#x2F;returns&gt; bool ParseData(T dataProviderOwner, string dataString, object userData); &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 解析内容。 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataBytes&quot;&gt;要解析的内容二进制流。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;startIndex&quot;&gt;内容二进制流的起始位置。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;length&quot;&gt;内容二进制流的长度。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;userData&quot;&gt;用户自定义数据。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;returns&gt;是否解析内容成功。&lt;&#x2F;returns&gt; bool ParseData(T dataProviderOwner, byte[] dataBytes, int startIndex, int length, object userData); &#x2F;&#x2F;&#x2F; &lt;summary&gt; &#x2F;&#x2F;&#x2F; 释放内容资源。 &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataProviderOwner&quot;&gt;数据提供者的持有者。&lt;&#x2F;param&gt; &#x2F;&#x2F;&#x2F; &lt;param name&#x3D;&quot;dataAsset&quot;&gt;要释放的内容资源。&lt;&#x2F;param&gt; void ReleaseDataAsset(T dataProviderOwner, object dataAsset);&#125; EventPool 事件池实现事件接口：订阅，取消订阅，抛出事件，立即抛出事件 Fire 抛出事件：线程安全，将待执行事件放入队列，下一帧执行 FireNow 立即抛出事件：线程不安全 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&#x2F;&#x2F;&#x2F;&#x2F; 摘要:&#x2F;&#x2F; 事件管理器接口。public interface IEventManager&#123; &#x2F;&#x2F; &#x2F;&#x2F; 摘要: &#x2F;&#x2F; 抛出事件，这个操作是线程安全的，即使不在主线程中抛出，也可保证在主线程中回调事件处理函数，但事件会在抛出后的下一帧分发。 &#x2F;&#x2F; &#x2F;&#x2F; 参数: &#x2F;&#x2F; sender: &#x2F;&#x2F; 事件源。 &#x2F;&#x2F; &#x2F;&#x2F; e: &#x2F;&#x2F; 事件参数。 void Fire(object sender, GameEventArgs e); &#x2F;&#x2F; &#x2F;&#x2F; 摘要: &#x2F;&#x2F; 抛出事件立即模式，这个操作不是线程安全的，事件会立刻分发。 &#x2F;&#x2F; &#x2F;&#x2F; 参数: &#x2F;&#x2F; sender: &#x2F;&#x2F; 事件源。 &#x2F;&#x2F; &#x2F;&#x2F; e: &#x2F;&#x2F; 事件参数。 void FireNow(object sender, GameEventArgs e); &#x2F;&#x2F; &#x2F;&#x2F; 摘要: &#x2F;&#x2F; 设置默认事件处理函数。 &#x2F;&#x2F; &#x2F;&#x2F; 参数: &#x2F;&#x2F; handler: &#x2F;&#x2F; 要设置的默认事件处理函数。 void SetDefaultHandler(EventHandler&lt;GameEventArgs&gt; handler); &#x2F;&#x2F; &#x2F;&#x2F; 摘要: &#x2F;&#x2F; 订阅事件处理函数。 &#x2F;&#x2F; &#x2F;&#x2F; 参数: &#x2F;&#x2F; id: &#x2F;&#x2F; 事件类型编号。 &#x2F;&#x2F; &#x2F;&#x2F; handler: &#x2F;&#x2F; 要订阅的事件处理函数。 void Subscribe(int id, EventHandler&lt;GameEventArgs&gt; handler); &#x2F;&#x2F; &#x2F;&#x2F; 摘要: &#x2F;&#x2F; 取消订阅事件处理函数。 &#x2F;&#x2F; &#x2F;&#x2F; 参数: &#x2F;&#x2F; id: &#x2F;&#x2F; 事件类型编号。 &#x2F;&#x2F; &#x2F;&#x2F; handler: &#x2F;&#x2F; 要取消订阅的事件处理函数。 void Unsubscribe(int id, EventHandler&lt;GameEventArgs&gt; handler);&#125; Log对Log进行封装，ILogHelper对Log的具体实现 ReferencePool 引用池为了降低因大量产生类对象而导致的内存分配，设计了引用池的概念，来将用完的对象清理并缓存起来，供后续使用。实现IReference接口，通过ReferencePool.Acquire()获取 TaskPool 任务池这个任务池主要做资源异步加载，下载等异步操作的任务 TaskBase：只是任务数据 ITaskAgent：任务代理，处理任务的具体行为如DownloadAgent.cs处的使用，Agent只处理该Task中数据，并在执行中通知对应Helper执行具体下载逻辑 TaskInfo：用于Debug等展示的信息 TaskPool：任务池,管理ITaskAgent并执行 Variable 变量变量封装 Version 版本号方便版本号管理，版本号在资源更新时需要使用，判断旧资源与新资源的版本号。 封装的基础类型 类 注释 GaneFrameworkAction 封装多参数委托 GameFrameworkFunc 封装多参数委托 GameFrameworkEntry 游戏入口 GameFrameworkEventArgs 事件数据封装 GameFrameworkException 异常抛出封装 GameFrameworkLinkedList 带缓存的LinkedList（链表） GameFrameworkLinkedListRange 有范围的链表，即理解为LinkedList中的一小段 GameFrameworkModule 模块的封装基类，统一管理各类模块Manager GameFrameworkMultiDictionary 多值字典,Value为链表 GameFrameworkSerializer 序列化器, Config经过了对Base层的理解，Config层就很轻松弄明白了。主要封装了数据读取，解析，获取。执行顺序：ConfigManager.ReadData()-&gt;IDataProvider.ReadData()-&gt;读取成功后-&gt;IDataProviderHelper.ReadData()，ConfigManager.ParseData()-&gt;IDataProvider.ParseData()-&gt;IDataProviderHelper.ParseData()使用上只需要：修改对应Helper即可 DataNode树状数据节点，个人使用最多就是GetOrAddNode(string) DataTable 使用DataTable，扩展一下可以很方便与excel使用 实现Helper类解析Excel产生的bytes数据即可 接口 注释 IDataTable 表(数据容器,管理多条数据) IDataRow 数据项(一条数据) IDataHelper 数据解析帮助类 IDataTableManager 管理所有表 Debugger运行时的Debugger界面，使用上很方便，具体就是打印多种不同信息 Download下载任务都是异步操作，因此需要等待，这时Base层定义好的TaskPool就有了作用下载步骤： DownloadTask携带下载数据：下载路径，保存路径，下载状态，缓冲区大小等 DownloadAgent处理任务数据，监听下载状态变化：下载数据更新，下载长度更新，下载完成，下载失败 IDownloadAgentHelper实现实际下载逻辑，如UnityWebRequestDownloadAgentHelper为例,使用UnityWebRequest发送实际下载请求，DownloadHandler抛出下载数据更新事件 DownloadCounter计算下载速度 IDownloadManager即下载管理器，管理任务池以及开放对应下载接口 EntityEntity即实体EntityManager-&gt;EntityGroup-&gt;Entity每个Entity有独一无二的id，Manager通过字典存储，方便管理Entity每个EntityManager管理EntityGroup,EntityGroup只管理组内的Entity每个Entity实际生成时通过EntityGroup中的对象池子管理ShowEntity流程：ReourcesManager加载资源-&gt;IEntityHelper实例化-&gt;注册进EntityGroup的对象池中-&gt;调用Entity生命周期函数OnInit-&gt;OnShow Event对Base层的EventPool的一层封装 FileSystem FileSystem对应一个物理文件,其中保存多个文件数据,每个文件数据可理解为一个数据类型的二进制数据，加载时解析成对应类型的数据其中有一个概念数据块，即每一个文件数据都是一个数据块，但是当同名数据更新时，文件数据会更换一个空闲块进行存储。 IFileSystem fileSystem = fileSystemComponent.CreateFileSystem(fullPath, FileSystemAccess.ReadWrite, maxFileCount, maxBlockCount);创建文件系统时，输入的maxFileCount，以及maxBlockCount对应最大文件个数以及最大数据块个数，目前FileSystem还不支持文件系统自动扩容，需一开始设定好，且maxFileCount &lt;= maxBlockCount，在更新文件数据时会更换数据块，因此更新越频繁的数据maxBlockCount需要越大，以保证数据更新有足够的碎片空间进行修改。 FSM有限状态机 Localization本地化语言,实现上与Config类似，只是在不同Language下读取不同的文件下存储的keyValue Network 接口 注释 INetworkManager 管理NetworkChannel INetworkChannel 建立链接，处理消息接收发送 INetworkChannelHelper 消息序列化反序列化帮助类 IPacketHandler 处理协议，每个协议有其ID，通过ID区分 IPacketHeader 消息头部信息主要记录长度，可自行添加头部信息携带数据，实际消息存在长度，发包是存在数据的粘包以及分包，这时需要头部信息判断消息是否接收完毕 使用上，客户端需要链接几处服务器就创建几个INetworkChannel分别链接，发消息也是同样每个链接处理各自的消息如：实际服务器一般存在：Gate服务器，Game服务器，Chat服务器，Friend服务器等等，使用NetworkManager可以很方便管理这种分布式服务器的链接 使用网络通信的数据结构最好使用protobuf，是目前最适合用于网络通信的数据结构，可以参考StarForce中Network模块心跳包实现 发送以及接收消息都是异步的，且客户端收到消息在非主线程，需要事件系统通过线程安全方式抛出 ObjectPool对象池，其中有提供CreateSingleSpawnObjectPool，CreateMultiSpawnObjectPool理解为：池子里的资源能够同时被使用一次或使用多次，缓存资源在Spawn后以及Release前都算是在使用下，MultiSpawnObjectPool能多次Spawn同一资源(目前还没使用过，感觉没什么作用，我目前理解为这个池子只管理了一个缓存资源，在任何情况下都能Spawn出来使用)，SingleSpawnObjectPool是我们通常情况下的对象池。 Procedure游戏进程管理，是FSM的实现，可以参考StarForce的游戏启动流程 Resource 资源管理模块设计整个框架，几乎每个模块都使用到资源管理器，普通的资源管理只是提供资源打包，加载，卸载等操作，这个强大的资源管理器还提供了可视化操作界面，资源使用分析，以及资源更新处理。 资源模式一共有三种：单机模式，预下载的可更新模式，使用时下载的可更新模式。 关于三种模式的使用方法参考StarForce的启动流程，非常详细。 关于资源组的思想，资源组类似于Unity中的AssetBundle包即压缩包，一个包里包含多个资源文件，方便管理，资源还可以设置文件系统，多个资源组放进一个文件中。 编辑器中的使用方式 使用前需要先设置ResourceEditor.xml文件配置，是ResourceEditor的过滤配置，再导入GF框架后可以直接复制StarForce中的配置 关于ResourceEditor有些无法过滤的文件：如bytes文件，atlas文件(将图片打成一个包并不会自动生成图集，Load出来还是Texture2D格式)等，可以手动扩展ResourceEditor的过滤配置修改脚本ResourceEditorController.cs过滤文件设置 进行第一步后就可看到设置路径下的所有合法资源文件了 Resource Builder：选择打包平台，以及路径，还可以选择打包事件处理器，如StarForce将打完的包复制了一份到StreamingAssets路径下，具体查看接口IBuildEventHandler.cs 实际运行中检查并更新资源流程12345678910111213141516171819202122&#x2F;&#x2F; 根据StarForce启动流程&#x2F;&#x2F; ---单机模式&#x2F;&#x2F; 注意：使用单机模式并初始化资源前，需要先构建 AssetBundle 并复制到 StreamingAssets 中，否则会产生 HTTP 404 错误GameEntry.Resource.InitResources(OnInitResourcesComplete);&#x2F;&#x2F; ---更新模式&#x2F;&#x2F; 1.向服务器请求版本信息GameEntry.WebRequest.AddWebRequest(Utility.Text.Format(GameEntry.BuiltinData.BuildInfo.CheckVersionUrl, GetPlatformPath()), this);&#x2F;&#x2F; 2.拿到服务器的VersionInfo，包含：最新版本信息，下载地址等等信息，设置资源更新下载地址并检查是否有更新GameEntry.Resource.UpdatePrefixUri &#x3D; Utility.Path.GetRegularPath(m_VersionInfo.UpdatePrefixUri);GameEntry.Resource.CheckVersionList(m_VersionInfo.InternalResourceVersion); &#x2F;&#x2F; 3.进行版本更新GameEntry.Resource.UpdateVersionList(m_VersionInfo.VersionListLength,m_VersionInfo.VersionListHashCode,m_VersionInfo.VersionListZipLength,m_VersionInfo.VersionListZipHashCode);&#x2F;&#x2F; 4.检查资源是否需要更新GameEntry.Resource.CheckResources(OnCheckResourcesComplete);&#x2F;&#x2F; 5.更新资源GameEntry.Resource.UpdateResources(OnUpdateResourcesComplete); dll源码解析Scene场景加载，卸载管理，对ResourceManager的LoadScene，UnLoadScene封装了一层 Setting游戏设置，与Config实现类似 Sound非常好用的音效管理器，高效，简洁，功能强大 接口 注释 ISoundAgent 一个音效有一个代理，内部逻辑代理接口，主要负责处理声音开启暂停等 ISoundAgentHelper 声音播放实际逻辑 ISoundGroup 声音组 ISoundGroupHelper 声音组帮助器，StarForce提供默认用于处理混音的组 ISoundHelper 释放资源 ISoundManager 管理音效播放，暂停，恢复以及音效组 UI设计思路与Sound以及Entity类似，UIGroup组管理UIForm，UIManager一起管理，需要注意的是同类型UIForm可以开启多个，只单个存在的界面需要自己判断是否再次开启，可以参考Demo中的写法 Utility提供了各种通用函数，方便使用 WebRequestWeb请求是异步的，通过TaskPool来代理Web请求，使用上带来的好处是可以不需要使用协程，监听成功失败事件即可。","categories":[{"name":"Unity","slug":"Unity","permalink":"https://skierhou.github.io/categories/Unity/"},{"name":"GameFramework","slug":"Unity/GameFramework","permalink":"https://skierhou.github.io/categories/Unity/GameFramework/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"https://skierhou.github.io/tags/Unity/"},{"name":"GameFramework","slug":"GameFramework","permalink":"https://skierhou.github.io/tags/GameFramework/"}]},{"title":"DOTS 详细介绍","slug":"Unity/DOTS","date":"2021-03-01T06:30:01.000Z","updated":"2021-04-12T09:53:27.568Z","comments":true,"path":"2021/03/01/Unity/DOTS/","link":"","permalink":"https://skierhou.github.io/2021/03/01/Unity/DOTS/","excerpt":"","text":"DOTS概述DATA-ORIENTED TECH STACK(多线程数据导向型技术堆栈)，是由ECS+JobSystem+Burst组成。 ECS (Entity Component System)JobSystemBurst (编译) 同时使用Unity.Mathematics以及JobSystem后使用[BurstCompile]标记，可使性能提升100倍以上。 项目中使用参考AngryBots_ECS项目Dots一些群体行为模板(鱼群等)一些文章","categories":[{"name":"Unity","slug":"Unity","permalink":"https://skierhou.github.io/categories/Unity/"},{"name":"DOTS","slug":"Unity/DOTS","permalink":"https://skierhou.github.io/categories/Unity/DOTS/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"https://skierhou.github.io/tags/Unity/"},{"name":"DOTS","slug":"DOTS","permalink":"https://skierhou.github.io/tags/DOTS/"}]}],"categories":[{"name":"Service","slug":"Service","permalink":"https://skierhou.github.io/categories/Service/"},{"name":"OpenGL","slug":"OpenGL","permalink":"https://skierhou.github.io/categories/OpenGL/"},{"name":"UnityShader","slug":"UnityShader","permalink":"https://skierhou.github.io/categories/UnityShader/"},{"name":"Graphics","slug":"Graphics","permalink":"https://skierhou.github.io/categories/Graphics/"},{"name":"Unity","slug":"Unity","permalink":"https://skierhou.github.io/categories/Unity/"},{"name":"Resource","slug":"Unity/Resource","permalink":"https://skierhou.github.io/categories/Unity/Resource/"},{"name":"Addressable","slug":"Unity/Resource/Addressable","permalink":"https://skierhou.github.io/categories/Unity/Resource/Addressable/"},{"name":"AssetBundle","slug":"Unity/Resource/AssetBundle","permalink":"https://skierhou.github.io/categories/Unity/Resource/AssetBundle/"},{"name":"通用","slug":"通用","permalink":"https://skierhou.github.io/categories/%E9%80%9A%E7%94%A8/"},{"name":"年度规划","slug":"年度规划","permalink":"https://skierhou.github.io/categories/%E5%B9%B4%E5%BA%A6%E8%A7%84%E5%88%92/"},{"name":"GameFramework","slug":"Unity/GameFramework","permalink":"https://skierhou.github.io/categories/Unity/GameFramework/"},{"name":"DOTS","slug":"Unity/DOTS","permalink":"https://skierhou.github.io/categories/Unity/DOTS/"}],"tags":[{"name":"ZeroMQ","slug":"ZeroMQ","permalink":"https://skierhou.github.io/tags/ZeroMQ/"},{"name":"KCP","slug":"KCP","permalink":"https://skierhou.github.io/tags/KCP/"},{"name":"Graphics","slug":"Graphics","permalink":"https://skierhou.github.io/tags/Graphics/"},{"name":"OpenGL","slug":"OpenGL","permalink":"https://skierhou.github.io/tags/OpenGL/"},{"name":"UnityShader","slug":"UnityShader","permalink":"https://skierhou.github.io/tags/UnityShader/"},{"name":"Math","slug":"Math","permalink":"https://skierhou.github.io/tags/Math/"},{"name":"Unity","slug":"Unity","permalink":"https://skierhou.github.io/tags/Unity/"},{"name":"Addressable","slug":"Addressable","permalink":"https://skierhou.github.io/tags/Addressable/"},{"name":"AssetBundle","slug":"AssetBundle","permalink":"https://skierhou.github.io/tags/AssetBundle/"},{"name":"Markdown","slug":"Markdown","permalink":"https://skierhou.github.io/tags/Markdown/"},{"name":"Plan","slug":"Plan","permalink":"https://skierhou.github.io/tags/Plan/"},{"name":"GameFramework","slug":"GameFramework","permalink":"https://skierhou.github.io/tags/GameFramework/"},{"name":"DOTS","slug":"DOTS","permalink":"https://skierhou.github.io/tags/DOTS/"}]}